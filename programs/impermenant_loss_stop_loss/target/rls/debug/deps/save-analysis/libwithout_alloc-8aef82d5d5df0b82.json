{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1","program":"/Users/nolanjacobsonpersonal/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","without_alloc","--edition=2018","/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","split-debuginfo=unpacked","-C","debuginfo=2","-C","metadata=8aef82d5d5df0b82","-C","extra-filename=-8aef82d5d5df0b82","--out-dir","/Users/nolanjacobsonpersonal/solana-hack-oasis-finance/anchor/programs/new-vault/target/rls/debug/deps","-L","dependency=/Users/nolanjacobsonpersonal/solana-hack-oasis-finance/anchor/programs/new-vault/target/rls/debug/deps","--extern","alloc_traits=/Users/nolanjacobsonpersonal/solana-hack-oasis-finance/anchor/programs/new-vault/target/rls/debug/deps/liballoc_traits-2d0d000d624888ef.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/nolanjacobsonpersonal/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/nolanjacobsonpersonal/solana-hack-oasis-finance/anchor/programs/new-vault/target/rls/debug/deps/libwithout_alloc-8aef82d5d5df0b82.rmeta"},"prelude":{"crate_id":{"name":"without_alloc","disambiguator":[4897644927104457825,0]},"crate_root":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src","external_crates":[{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[10550174156715778454,0]}},{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[8770346864682343241,0]}},{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[8196830942918118636,0]}},{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/alloc.rs","num":4,"id":{"name":"alloc_traits","disambiguator":[15874203894498791052,0]}}],"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/lib.rs","byte_start":0,"byte_end":1259,"line_start":1,"line_end":40,"column_start":1,"column_end":24}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":82},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/lib.rs","byte_start":1202,"byte_end":1205,"line_start":38,"line_end":38,"column_start":16,"column_end":19},"alias_span":null,"name":"Box","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":489},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/lib.rs","byte_start":1226,"byte_end":1234,"line_start":39,"line_end":39,"column_start":20,"column_end":28},"alias_span":null,"name":"FixedVec","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":310},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/lib.rs","byte_start":1252,"byte_end":1258,"line_start":40,"line_end":40,"column_start":17,"column_end":23},"alias_span":null,"name":"Uninit","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/lib.rs","byte_start":0,"byte_end":1259,"line_start":1,"line_end":40,"column_start":1,"column_end":24},"name":"","qualname":"::","value":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":56},{"krate":0,"index":146},{"krate":0,"index":287},{"krate":0,"index":463},{"krate":0,"index":617},{"krate":0,"index":620},{"krate":0,"index":623}],"decl_id":null,"docs":" Dynamic data structures that do not require a global allocator.","sig":null,"attributes":[{"value":"/ Dynamic data structures that do not require a global allocator.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/lib.rs","byte_start":0,"byte_end":67,"line_start":1,"line_end":1,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/lib.rs","byte_start":68,"byte_end":71,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ The most directly useful might be a local `FixedVec` that requires its element to be neither","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/lib.rs","byte_start":72,"byte_end":168,"line_start":3,"line_end":3,"column_start":1,"column_end":97}},{"value":"/ `Clone`, `Copy` nor `Default` but is simply a normal vector on a locally borrowed chunk of raw","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/lib.rs","byte_start":169,"byte_end":267,"line_start":4,"line_end":4,"column_start":1,"column_end":99}},{"value":"/ memory. For this we will use the `Bump` allocator of [`static-alloc`] which loan us memory from","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/lib.rs","byte_start":268,"byte_end":367,"line_start":5,"line_end":5,"column_start":1,"column_end":100}},{"value":"/ the stack and cleans up by leaving the scope without requiring explicit deallocation. Sort of","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/lib.rs","byte_start":368,"byte_end":465,"line_start":6,"line_end":6,"column_start":1,"column_end":98}},{"value":"/ like `alloca` but safe and pretty.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/lib.rs","byte_start":466,"byte_end":504,"line_start":7,"line_end":7,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/lib.rs","byte_start":505,"byte_end":508,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ [`static-alloc`]: https://crates.io/crates/static-alloc","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/lib.rs","byte_start":509,"byte_end":568,"line_start":9,"line_end":9,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/lib.rs","byte_start":569,"byte_end":572,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/lib.rs","byte_start":573,"byte_end":584,"line_start":11,"line_end":11,"column_start":1,"column_end":12}},{"value":"/ use static_alloc::Bump;","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/lib.rs","byte_start":585,"byte_end":612,"line_start":12,"line_end":12,"column_start":1,"column_end":28}},{"value":"/ use without_alloc::{FixedVec, alloc::LocalAllocLeakExt};","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/lib.rs","byte_start":613,"byte_end":673,"line_start":13,"line_end":13,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/lib.rs","byte_start":674,"byte_end":677,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ let mut pool: Bump<[usize; 16]> = Bump::uninit();","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/lib.rs","byte_start":678,"byte_end":731,"line_start":15,"line_end":15,"column_start":1,"column_end":54}},{"value":"/ // Allocate a vector with capacity of 16 from the slab.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/lib.rs","byte_start":732,"byte_end":791,"line_start":16,"line_end":16,"column_start":1,"column_end":60}},{"value":"/ let mut vector = pool.fixed_vec(16).unwrap();","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/lib.rs","byte_start":792,"byte_end":841,"line_start":17,"line_end":17,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/lib.rs","byte_start":842,"byte_end":845,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ let mut num = 0;","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/lib.rs","byte_start":846,"byte_end":866,"line_start":19,"line_end":19,"column_start":1,"column_end":21}},{"value":"/ // Push a mutable reference, not `Copy` nor `Clone`!","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/lib.rs","byte_start":867,"byte_end":923,"line_start":20,"line_end":20,"column_start":1,"column_end":57}},{"value":"/ vector.push(&mut num);","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/lib.rs","byte_start":924,"byte_end":950,"line_start":21,"line_end":21,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/lib.rs","byte_start":951,"byte_end":954,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ *vector.pop().unwrap() = 4;","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/lib.rs","byte_start":955,"byte_end":986,"line_start":23,"line_end":23,"column_start":1,"column_end":32}},{"value":"/ drop(vector);","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/lib.rs","byte_start":987,"byte_end":1004,"line_start":24,"line_end":24,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/lib.rs","byte_start":1005,"byte_end":1008,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(num, 4);","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/lib.rs","byte_start":1009,"byte_end":1032,"line_start":26,"line_end":26,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/lib.rs","byte_start":1033,"byte_end":1040,"line_start":27,"line_end":27,"column_start":1,"column_end":8}},{"value":"no_std","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/lib.rs","byte_start":1074,"byte_end":1084,"line_start":29,"line_end":29,"column_start":1,"column_end":11}},{"value":"deny(missing_docs)","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/lib.rs","byte_start":1085,"byte_end":1107,"line_start":30,"line_end":30,"column_start":1,"column_end":23}}]},{"kind":"Mod","id":{"krate":0,"index":4},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/alloc.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"alloc","qualname":"::alloc","value":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/alloc.rs","parent":null,"children":[{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":9},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":16},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":23},{"krate":0,"index":26},{"krate":0,"index":29},{"krate":0,"index":626},{"krate":0,"index":630},{"krate":0,"index":32},{"krate":0,"index":43},{"krate":0,"index":46},{"krate":0,"index":49}],"decl_id":null,"docs":" Allocator extension traits.\n","sig":null,"attributes":[{"value":"/ Allocator extension traits.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/alloc.rs","byte_start":1261,"byte_end":1292,"line_start":1,"line_end":1,"column_start":1,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":626},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/alloc.rs","byte_start":1674,"byte_end":1690,"line_start":17,"line_end":17,"column_start":12,"column_end":28},"name":"LeakedAllocation","qualname":"::alloc::LeakedAllocation","value":"LeakedAllocation { uninit }","parent":null,"children":[{"krate":0,"index":629}],"decl_id":null,"docs":" Values of for some allocation including the [`Uninit`].","sig":null,"attributes":[{"value":"/ Values of for some allocation including the [`Uninit`].","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/alloc.rs","byte_start":1454,"byte_end":1513,"line_start":11,"line_end":11,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/alloc.rs","byte_start":1514,"byte_end":1517,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ See [`Uninit`] for a better picture of the potential usage of this result.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/alloc.rs","byte_start":1518,"byte_end":1596,"line_start":13,"line_end":13,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/alloc.rs","byte_start":1597,"byte_end":1600,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ [`Uninit`]: ../uninit/struct.Uninit.html","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/alloc.rs","byte_start":1601,"byte_end":1645,"line_start":15,"line_end":15,"column_start":1,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":629},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/alloc.rs","byte_start":1779,"byte_end":1785,"line_start":19,"line_end":19,"column_start":9,"column_end":15},"name":"uninit","qualname":"::alloc::LeakedAllocation::uninit","value":"uninit::Uninit<'a, T>","parent":{"krate":0,"index":626},"children":[],"decl_id":null,"docs":" Uninit pointer to the region with specified layout.\n","sig":null,"attributes":[{"value":"/ Uninit pointer to the region with specified layout.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/alloc.rs","byte_start":1715,"byte_end":1770,"line_start":18,"line_end":18,"column_start":5,"column_end":60}}]},{"kind":"Trait","id":{"krate":0,"index":32},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/alloc.rs","byte_start":1857,"byte_end":1874,"line_start":23,"line_end":23,"column_start":11,"column_end":28},"name":"LocalAllocLeakExt","qualname":"::alloc::LocalAllocLeakExt","value":"LocalAllocLeakExt<'alloc>: LocalAlloc","parent":null,"children":[{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":37},{"krate":0,"index":39},{"krate":0,"index":41}],"decl_id":null,"docs":" Leak allocations into uninit regions.\n","sig":null,"attributes":[{"value":"/ Leak allocations into uninit regions.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/alloc.rs","byte_start":1805,"byte_end":1846,"line_start":22,"line_end":22,"column_start":1,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":34},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/alloc.rs","byte_start":2186,"byte_end":2198,"line_start":30,"line_end":30,"column_start":8,"column_end":20},"name":"alloc_layout","qualname":"::alloc::LocalAllocLeakExt::alloc_layout","value":"pub fn alloc_layout(&'alloc Self, NonZeroLayout) -> Option<LeakedAllocation>","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Leak an allocation with detailed layout.","sig":null,"attributes":[{"value":"/ Leak an allocation with detailed layout.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/alloc.rs","byte_start":1909,"byte_end":1953,"line_start":24,"line_end":24,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/alloc.rs","byte_start":1958,"byte_end":1961,"line_start":25,"line_end":25,"column_start":5,"column_end":8}},{"value":"/ Provides an [`Uninit`] wrapping several aspects of initialization in a safe interface,","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/alloc.rs","byte_start":1966,"byte_end":2056,"line_start":26,"line_end":26,"column_start":5,"column_end":95}},{"value":"/ bound by the lifetime of the reference to the allocator.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/alloc.rs","byte_start":2061,"byte_end":2121,"line_start":27,"line_end":27,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/alloc.rs","byte_start":2126,"byte_end":2129,"line_start":28,"line_end":28,"column_start":5,"column_end":8}},{"value":"/ [`Uninit`]: ../uninit/struct.Uninit.html","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/alloc.rs","byte_start":2134,"byte_end":2178,"line_start":29,"line_end":29,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":35},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/alloc.rs","byte_start":3314,"byte_end":3321,"line_start":65,"line_end":65,"column_start":8,"column_end":15},"name":"alloc_t","qualname":"::alloc::LocalAllocLeakExt::alloc_t","value":"pub fn alloc_t<V>(&'alloc Self) -> Option<LeakedAllocation>","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Leak an allocation for a specific type.","sig":null,"attributes":[{"value":"/ Leak an allocation for a specific type.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/alloc.rs","byte_start":2514,"byte_end":2557,"line_start":43,"line_end":43,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/alloc.rs","byte_start":2562,"byte_end":2565,"line_start":44,"line_end":44,"column_start":5,"column_end":8}},{"value":"/ It is not yet initialized but provides a safe interface for that initialization. Note that","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/alloc.rs","byte_start":2570,"byte_end":2664,"line_start":45,"line_end":45,"column_start":5,"column_end":99}},{"value":"/ the type **can** be a ZST in which case a dangling pointer is substituted for the true","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/alloc.rs","byte_start":2669,"byte_end":2759,"line_start":46,"line_end":46,"column_start":5,"column_end":95}},{"value":"/ allocation.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/alloc.rs","byte_start":2764,"byte_end":2779,"line_start":47,"line_end":47,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/alloc.rs","byte_start":2784,"byte_end":2787,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ ## Usage","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/alloc.rs","byte_start":2792,"byte_end":2804,"line_start":49,"line_end":49,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/alloc.rs","byte_start":2809,"byte_end":2812,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/alloc.rs","byte_start":2817,"byte_end":2824,"line_start":51,"line_end":51,"column_start":5,"column_end":12}},{"value":"/ # use static_alloc::Bump;","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/alloc.rs","byte_start":2829,"byte_end":2858,"line_start":52,"line_end":52,"column_start":5,"column_end":34}},{"value":"/ # use without_alloc::alloc::LocalAllocLeakExt;","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/alloc.rs","byte_start":2863,"byte_end":2913,"line_start":53,"line_end":53,"column_start":5,"column_end":55}},{"value":"/ use core::cell::{Ref, RefCell};","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/alloc.rs","byte_start":2918,"byte_end":2953,"line_start":54,"line_end":54,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/alloc.rs","byte_start":2958,"byte_end":2961,"line_start":55,"line_end":55,"column_start":5,"column_end":8}},{"value":"/ let slab: Bump<[Ref<'static, usize>; 1]> = Bump::uninit();","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/alloc.rs","byte_start":2966,"byte_end":3028,"line_start":56,"line_end":56,"column_start":5,"column_end":67}},{"value":"/ let data = RefCell::new(0xff);","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/alloc.rs","byte_start":3033,"byte_end":3067,"line_start":57,"line_end":57,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/alloc.rs","byte_start":3072,"byte_end":3075,"line_start":58,"line_end":58,"column_start":5,"column_end":8}},{"value":"/ // We can place a `Ref` here but we did not yet.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/alloc.rs","byte_start":3080,"byte_end":3132,"line_start":59,"line_end":59,"column_start":5,"column_end":57}},{"value":"/ let alloc = slab.alloc_t::<Ref<usize>>().unwrap();","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/alloc.rs","byte_start":3137,"byte_end":3191,"line_start":60,"line_end":60,"column_start":5,"column_end":59}},{"value":"/ let cell_ref = alloc.uninit.init(data.borrow());","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/alloc.rs","byte_start":3196,"byte_end":3248,"line_start":61,"line_end":61,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/alloc.rs","byte_start":3253,"byte_end":3256,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(**cell_ref, 0xff);","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/alloc.rs","byte_start":3261,"byte_end":3294,"line_start":63,"line_end":63,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/alloc.rs","byte_start":3299,"byte_end":3306,"line_start":64,"line_end":64,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":37},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/alloc.rs","byte_start":3956,"byte_end":3961,"line_start":82,"line_end":82,"column_start":8,"column_end":13},"name":"boxed","qualname":"::alloc::LocalAllocLeakExt::boxed","value":"pub fn boxed<V>(&'alloc Self, V) -> Option<Box>","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Allocate a [`Box`].","sig":null,"attributes":[{"value":"/ Allocate a [`Box`].","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/alloc.rs","byte_start":3703,"byte_end":3726,"line_start":76,"line_end":76,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/alloc.rs","byte_start":3731,"byte_end":3734,"line_start":77,"line_end":77,"column_start":5,"column_end":8}},{"value":"/ This will allocate some memory with the correct layout for a [`Box`], then place the","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/alloc.rs","byte_start":3739,"byte_end":3827,"line_start":78,"line_end":78,"column_start":5,"column_end":93}},{"value":"/ provided value into the allocation by constructing an [`Box`].","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/alloc.rs","byte_start":3832,"byte_end":3898,"line_start":79,"line_end":79,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/alloc.rs","byte_start":3903,"byte_end":3906,"line_start":80,"line_end":80,"column_start":5,"column_end":8}},{"value":"/ [`Box`]: ../boxed/struct.Box.html","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/alloc.rs","byte_start":3911,"byte_end":3948,"line_start":81,"line_end":81,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":39},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/alloc.rs","byte_start":4426,"byte_end":4435,"line_start":94,"line_end":94,"column_start":8,"column_end":17},"name":"fixed_vec","qualname":"::alloc::LocalAllocLeakExt::fixed_vec","value":"pub fn fixed_vec<V>(&'alloc Self, usize) -> Option<FixedVec>","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Allocate a [`FixedVec`].","sig":null,"attributes":[{"value":"/ Allocate a [`FixedVec`].","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/alloc.rs","byte_start":4110,"byte_end":4138,"line_start":87,"line_end":87,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/alloc.rs","byte_start":4143,"byte_end":4146,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ This will allocate some memory with the correct layout for a [`FixedVec`] of the given","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/alloc.rs","byte_start":4151,"byte_end":4241,"line_start":89,"line_end":89,"column_start":5,"column_end":95}},{"value":"/ capacity (in elements) and wrap it. Returns `None` if it is not possible to allocate the","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/alloc.rs","byte_start":4246,"byte_end":4338,"line_start":90,"line_end":90,"column_start":5,"column_end":97}},{"value":"/ layout.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/alloc.rs","byte_start":4343,"byte_end":4354,"line_start":91,"line_end":91,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/alloc.rs","byte_start":4359,"byte_end":4362,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ [`FixedVec`]: ../fixed_vec/struct.FixedVec.html","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/alloc.rs","byte_start":4367,"byte_end":4418,"line_start":93,"line_end":93,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":41},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/alloc.rs","byte_start":5274,"byte_end":5276,"line_start":116,"line_end":116,"column_start":8,"column_end":10},"name":"rc","qualname":"::alloc::LocalAllocLeakExt::rc","value":"pub fn rc<V>(&'alloc Self, V) -> Option<Rc>","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Allocate an [`Rc`].","sig":null,"attributes":[{"value":"/ Allocate an [`Rc`].","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/alloc.rs","byte_start":5027,"byte_end":5050,"line_start":110,"line_end":110,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/alloc.rs","byte_start":5055,"byte_end":5058,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ This will allocate some memory with the correct layout for an [`Rc`], then place the","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/alloc.rs","byte_start":5063,"byte_end":5151,"line_start":112,"line_end":112,"column_start":5,"column_end":93}},{"value":"/ provided value into the allocation by constructing an [`Rc`].","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/alloc.rs","byte_start":5156,"byte_end":5221,"line_start":113,"line_end":113,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/alloc.rs","byte_start":5226,"byte_end":5229,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ [`Rc`]: ../rc/struct.Rc.html","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/alloc.rs","byte_start":5234,"byte_end":5266,"line_start":115,"line_end":115,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/alloc.rs","byte_start":5921,"byte_end":5935,"line_start":134,"line_end":134,"column_start":12,"column_end":26},"name":"zst_fake_alloc","qualname":"<LeakedAllocation>::zst_fake_alloc","value":"pub fn zst_fake_alloc() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Invent a new allocation for a zero-sized type (ZST).","sig":null,"attributes":[{"value":"/ Invent a new allocation for a zero-sized type (ZST).","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/alloc.rs","byte_start":5751,"byte_end":5807,"line_start":130,"line_end":130,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/alloc.rs","byte_start":5812,"byte_end":5815,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/alloc.rs","byte_start":5820,"byte_end":5832,"line_start":132,"line_end":132,"column_start":5,"column_end":17}},{"value":"/ This method panics when the type parameter is not a zero sized type.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/alloc.rs","byte_start":5837,"byte_end":5909,"line_start":133,"line_end":133,"column_start":5,"column_end":77}}]},{"kind":"Mod","id":{"krate":0,"index":56},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"boxed","qualname":"::boxed","value":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","parent":null,"children":[{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":61},{"krate":0,"index":64},{"krate":0,"index":67},{"krate":0,"index":70},{"krate":0,"index":73},{"krate":0,"index":76},{"krate":0,"index":79},{"krate":0,"index":82},{"krate":0,"index":86},{"krate":0,"index":94},{"krate":0,"index":97},{"krate":0,"index":101},{"krate":0,"index":104},{"krate":0,"index":110},{"krate":0,"index":119},{"krate":0,"index":122},{"krate":0,"index":124},{"krate":0,"index":128},{"krate":0,"index":131},{"krate":0,"index":134},{"krate":0,"index":137},{"krate":0,"index":140},{"krate":0,"index":143}],"decl_id":null,"docs":" A pointer type for allocation with RAII semantics.","sig":null,"attributes":[{"value":"/ A pointer type for allocation with RAII semantics.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":6402,"byte_end":6456,"line_start":1,"line_end":1,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":6457,"byte_end":6460,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ See [`Box`] for more information.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":6461,"byte_end":6498,"line_start":3,"line_end":3,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":6499,"byte_end":6502,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ [`Box`]: struct.Box.html","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":6503,"byte_end":6531,"line_start":5,"line_end":5,"column_start":1,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":82},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":9024,"byte_end":9027,"line_start":62,"line_end":62,"column_start":12,"column_end":15},"name":"Box","qualname":"::boxed::Box","value":"Box {  }","parent":null,"children":[{"krate":0,"index":85}],"decl_id":null,"docs":" An allocated instance of a type.","sig":null,"attributes":[{"value":"/ An allocated instance of a type.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":6611,"byte_end":6647,"line_start":9,"line_end":9,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":6648,"byte_end":6651,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ ## Example","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":6652,"byte_end":6666,"line_start":11,"line_end":11,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":6667,"byte_end":6670,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ The basic usage are allocated recursive data structures. Here is a standard example using a","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":6671,"byte_end":6766,"line_start":13,"line_end":13,"column_start":1,"column_end":96}},{"value":"/ `Bump` with `'static` storage duration as the allocator:","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":6767,"byte_end":6827,"line_start":14,"line_end":14,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":6828,"byte_end":6831,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":6832,"byte_end":6839,"line_start":16,"line_end":16,"column_start":1,"column_end":8}},{"value":"/ use without_alloc::{Box, alloc::LocalAllocLeakExt};","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":6840,"byte_end":6895,"line_start":17,"line_end":17,"column_start":1,"column_end":56}},{"value":"/ use static_alloc::Bump;","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":6896,"byte_end":6923,"line_start":18,"line_end":18,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":6924,"byte_end":6927,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ #[derive(Debug)]","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":6928,"byte_end":6948,"line_start":20,"line_end":20,"column_start":1,"column_end":21}},{"value":"/ enum List<T> {","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":6949,"byte_end":6967,"line_start":21,"line_end":21,"column_start":1,"column_end":19}},{"value":"/     Nil,","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":6968,"byte_end":6980,"line_start":22,"line_end":22,"column_start":1,"column_end":13}},{"value":"/     Cons(T, Box<'static, List<T>>),","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":6981,"byte_end":7020,"line_start":23,"line_end":23,"column_start":1,"column_end":40}},{"value":"/ }","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":7021,"byte_end":7026,"line_start":24,"line_end":24,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":7027,"byte_end":7030,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ static SLAB: Bump<[u8; 1024]> = Bump::uninit();","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":7031,"byte_end":7082,"line_start":26,"line_end":26,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":7083,"byte_end":7086,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ let base = SLAB.boxed(List::Nil).unwrap();","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":7087,"byte_end":7133,"line_start":28,"line_end":28,"column_start":1,"column_end":47}},{"value":"/ let one = SLAB.boxed(List::Cons(0, base)).unwrap();","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":7134,"byte_end":7189,"line_start":29,"line_end":29,"column_start":1,"column_end":56}},{"value":"/ let two = SLAB.boxed(List::Cons(1, one)).unwrap();","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":7190,"byte_end":7244,"line_start":30,"line_end":30,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":7245,"byte_end":7248,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ // We can destruct the value (not with `*` but comparable).","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":7249,"byte_end":7312,"line_start":32,"line_end":32,"column_start":1,"column_end":64}},{"value":"/ match Box::take(two).0 {","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":7313,"byte_end":7341,"line_start":33,"line_end":33,"column_start":1,"column_end":29}},{"value":"/     List::Cons(val, _)  => assert_eq!(val, 1), // Got the value back.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":7342,"byte_end":7415,"line_start":34,"line_end":34,"column_start":1,"column_end":74}},{"value":"/     _ => unreachable!(),","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":7416,"byte_end":7444,"line_start":35,"line_end":35,"column_start":1,"column_end":29}},{"value":"/ }","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":7445,"byte_end":7450,"line_start":36,"line_end":36,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":7451,"byte_end":7458,"line_start":37,"line_end":37,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":7459,"byte_end":7462,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ ## Downsides","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":7463,"byte_end":7479,"line_start":39,"line_end":39,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":7480,"byte_end":7483,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ Unfortunately, this `Box` does not yet support unsizing. This is very unfortunate as it means","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":7484,"byte_end":7581,"line_start":41,"line_end":41,"column_start":1,"column_end":98}},{"value":"/ you can't use it for type erasure.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":7582,"byte_end":7620,"line_start":42,"line_end":42,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":7621,"byte_end":7624,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ ## Design","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":7625,"byte_end":7638,"line_start":44,"line_end":44,"column_start":1,"column_end":14}},{"value":"/ You will likely notice quickly that this has different semantics than the `std::boxed::Box`.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":7639,"byte_end":7735,"line_start":45,"line_end":45,"column_start":1,"column_end":97}},{"value":"/ Its inner pointer may be larger and it does not allocate nor deallocate memory on its own. This","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":7736,"byte_end":7835,"line_start":46,"line_end":46,"column_start":1,"column_end":100}},{"value":"/ only wraps a fully initialized `Uninit` in a RAII/`Drop` interface.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":7836,"byte_end":7907,"line_start":47,"line_end":47,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":7908,"byte_end":7911,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ Of course, there is a reason for this choice. The standard `Box`, storing only the raw pointer","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":7912,"byte_end":8010,"line_start":49,"line_end":49,"column_start":1,"column_end":99}},{"value":"/ (as a `Unique`), requires its underlying allocation to have the *exact* same size and align","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":8011,"byte_end":8106,"line_start":50,"line_end":50,"column_start":1,"column_end":96}},{"value":"/ (`Layout`) as the value and the layout needs to be recalculated when deallocating. Without a","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":8107,"byte_end":8203,"line_start":51,"line_end":51,"column_start":1,"column_end":97}},{"value":"/ dependency on an allocator it would seem that the underlying layout becomes less important and","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":8204,"byte_end":8302,"line_start":52,"line_end":52,"column_start":1,"column_end":99}},{"value":"/ can be thrown away but the opposite is the case. Many converters for the `std::boxed::Box` rely","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":8303,"byte_end":8402,"line_start":53,"line_end":53,"column_start":1,"column_end":100}},{"value":"/ on being able to reallocate into a suitably constructed new allocation on will. Not having this","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":8403,"byte_end":8502,"line_start":54,"line_end":54,"column_start":1,"column_end":100}},{"value":"/ luxury at our disposal means there should be a mechanism to cope with mismatching allocations","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":8503,"byte_end":8600,"line_start":55,"line_end":55,"column_start":1,"column_end":98}},{"value":"/ anyways. So we simply store the full `Uninit` provided, relying on the library user to manage","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":8601,"byte_end":8698,"line_start":56,"line_end":56,"column_start":1,"column_end":98}},{"value":"/ other aspects of allocation for us.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":8699,"byte_end":8738,"line_start":57,"line_end":57,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":8739,"byte_end":8742,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ Instead, this `Box` can offer additional ways to manipulate and massage the underlying","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":8743,"byte_end":8833,"line_start":59,"line_end":59,"column_start":1,"column_end":91}},{"value":"/ allocation. It should be possible to restore the exact allocation `Box` semantics (albeit with","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":8834,"byte_end":8932,"line_start":60,"line_end":60,"column_start":1,"column_end":99}},{"value":"/ one `usize` more space usage) via a wrapper when an allocator is available.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":8933,"byte_end":9012,"line_start":61,"line_end":61,"column_start":1,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":89},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":9150,"byte_end":9153,"line_start":68,"line_end":68,"column_start":12,"column_end":15},"name":"new","qualname":"<Box>::new","value":"pub fn new(T, Uninit) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Place `val` into a provided allocation.\n","sig":null,"attributes":[{"value":"/ Place `val` into a provided allocation.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":9095,"byte_end":9138,"line_start":67,"line_end":67,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":9665,"byte_end":9673,"line_start":84,"line_end":84,"column_start":19,"column_end":27},"name":"from_raw","qualname":"<Box>::from_raw","value":"pub unsafe fn from_raw(Uninit) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a box from an pointer to an already initialized value.","sig":null,"attributes":[{"value":"/ Create a box from an pointer to an already initialized value.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":9295,"byte_end":9360,"line_start":76,"line_end":76,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":9365,"byte_end":9368,"line_start":77,"line_end":77,"column_start":5,"column_end":8}},{"value":"/ Ensures that an already initialized value is properly dropped at the end of the lifetime of","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":9373,"byte_end":9468,"line_start":78,"line_end":78,"column_start":5,"column_end":100}},{"value":"/ the `Box`.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":9473,"byte_end":9487,"line_start":79,"line_end":79,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":9492,"byte_end":9495,"line_start":80,"line_end":80,"column_start":5,"column_end":8}},{"value":"/ ## Safety","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":9500,"byte_end":9513,"line_start":81,"line_end":81,"column_start":5,"column_end":18}},{"value":"/ The pointed-to location must have already been initialized via external means. This is as","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":9518,"byte_end":9611,"line_start":82,"line_end":82,"column_start":5,"column_end":98}},{"value":"/ unsafe as `init.as_mut()`.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":9616,"byte_end":9646,"line_start":83,"line_end":83,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":91},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":9997,"byte_end":10005,"line_start":94,"line_end":94,"column_start":12,"column_end":20},"name":"into_raw","qualname":"<Box>::into_raw","value":"pub fn into_raw(Self) -> Uninit","parent":null,"children":[],"decl_id":null,"docs":" Unwrap the contained `Uninit`.","sig":null,"attributes":[{"value":"/ Unwrap the contained `Uninit`.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":9765,"byte_end":9799,"line_start":90,"line_end":90,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":9804,"byte_end":9807,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ The value stays initialized but that information is no longer statically available. If you","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":9812,"byte_end":9906,"line_start":92,"line_end":92,"column_start":5,"column_end":99}},{"value":"/ simply want to avoid the `Drop` call, consider `ManuallyDrop` instead.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":9911,"byte_end":9985,"line_start":93,"line_end":93,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":10522,"byte_end":10526,"line_start":108,"line_end":108,"column_start":12,"column_end":16},"name":"leak","qualname":"<Box>::leak","value":"pub fn leak(Self) -> &'a mut T","parent":null,"children":[],"decl_id":null,"docs":" Consumes and leaks the Box, returning a mutable reference, `&'a mut T`.","sig":null,"attributes":[{"value":"/ Consumes and leaks the Box, returning a mutable reference, `&'a mut T`.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":10297,"byte_end":10372,"line_start":104,"line_end":104,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":10377,"byte_end":10380,"line_start":105,"line_end":105,"column_start":5,"column_end":8}},{"value":"/ Compared to a standard `Box` it should be noted that the reference alone is not enough","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":10385,"byte_end":10475,"line_start":106,"line_end":106,"column_start":5,"column_end":95}},{"value":"/ to invoke `Box::from_raw`.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":10480,"byte_end":10510,"line_start":107,"line_end":107,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":93},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":10787,"byte_end":10791,"line_start":117,"line_end":117,"column_start":12,"column_end":16},"name":"take","qualname":"<Box>::take","value":"pub fn take(Self) -> (T, Uninit)","parent":null,"children":[],"decl_id":null,"docs":" Take out the value and return the allocation.","sig":null,"attributes":[{"value":"/ Take out the value and return the allocation.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":10670,"byte_end":10719,"line_start":114,"line_end":114,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":10724,"byte_end":10727,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ This function is the opposite of `new`.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":10732,"byte_end":10775,"line_start":116,"line_end":116,"column_start":5,"column_end":48}}]},{"kind":"Mod","id":{"krate":0,"index":146},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"rc","qualname":"::rc","value":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","parent":null,"children":[{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":151},{"krate":0,"index":154},{"krate":0,"index":157},{"krate":0,"index":160},{"krate":0,"index":163},{"krate":0,"index":166},{"krate":0,"index":169},{"krate":0,"index":172},{"krate":0,"index":175},{"krate":0,"index":176},{"krate":0,"index":179},{"krate":0,"index":182},{"krate":0,"index":186},{"krate":0,"index":190},{"krate":0,"index":195},{"krate":0,"index":203},{"krate":0,"index":218},{"krate":0,"index":223},{"krate":0,"index":232},{"krate":0,"index":235},{"krate":0,"index":239},{"krate":0,"index":242},{"krate":0,"index":245},{"krate":0,"index":248},{"krate":0,"index":254},{"krate":0,"index":256},{"krate":0,"index":265},{"krate":0,"index":268},{"krate":0,"index":272},{"krate":0,"index":275},{"krate":0,"index":278},{"krate":0,"index":281},{"krate":0,"index":284}],"decl_id":null,"docs":" Reference counter value.","sig":null,"attributes":[{"value":"/ Reference counter value.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":13865,"byte_end":13893,"line_start":1,"line_end":1,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":13894,"byte_end":13897,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ See [`Rc`] for more information.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":13898,"byte_end":13934,"line_start":3,"line_end":3,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":13935,"byte_end":13938,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ [`Rc`]: ./struct.Rc.html","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":13939,"byte_end":13967,"line_start":5,"line_end":5,"column_start":1,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":182},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":14706,"byte_end":14708,"line_start":23,"line_end":23,"column_start":12,"column_end":14},"name":"Rc","qualname":"::rc::Rc","value":"Rc {  }","parent":null,"children":[{"krate":0,"index":185}],"decl_id":null,"docs":" A single-threaded reference-counting pointer. 'Rc' stands for 'Reference Counted'.","sig":null,"attributes":[{"value":"/ A single-threaded reference-counting pointer. 'Rc' stands for 'Reference Counted'.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":14109,"byte_end":14195,"line_start":12,"line_end":12,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":14196,"byte_end":14199,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ The inherent methods are all associated functions. This means you can not call them","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":14200,"byte_end":14287,"line_start":14,"line_end":14,"column_start":1,"column_end":88}},{"value":"/ unexpectedly through deref-coercion the reference itself. Instead, you need to call them as","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":14288,"byte_end":14383,"line_start":15,"line_end":15,"column_start":1,"column_end":96}},{"value":"/ `Rc::try_unwrap(rc)` etc. .","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":14384,"byte_end":14415,"line_start":16,"line_end":16,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":14416,"byte_end":14419,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ Compared to the standard library version, this will perform its own allocation. Instead, you","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":14420,"byte_end":14516,"line_start":18,"line_end":18,"column_start":1,"column_end":97}},{"value":"/ can ask [`Bump`] to perform them or manually allocate guided by the necessary [`layout`].","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":14517,"byte_end":14610,"line_start":19,"line_end":19,"column_start":1,"column_end":94}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":14611,"byte_end":14614,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ [`Bump`]: ../slab/struct.Bump.html#method.rc","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":14615,"byte_end":14663,"line_start":21,"line_end":21,"column_start":1,"column_end":49}},{"value":"/ [`layout`]: #method.layout","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":14664,"byte_end":14694,"line_start":22,"line_end":22,"column_start":1,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":186},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":15225,"byte_end":15229,"line_start":40,"line_end":40,"column_start":12,"column_end":16},"name":"Weak","qualname":"::rc::Weak","value":"Weak {  }","parent":null,"children":[{"krate":0,"index":189}],"decl_id":null,"docs":" A reference-counting pointer to the allocation of an `Rc`.","sig":null,"attributes":[{"value":"/ A reference-counting pointer to the allocation of an `Rc`.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":15032,"byte_end":15094,"line_start":32,"line_end":32,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":15095,"byte_end":15098,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ ## TODO","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":15099,"byte_end":15110,"line_start":34,"line_end":34,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":15111,"byte_end":15114,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ Evaluate an interface:","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":15115,"byte_end":15141,"line_start":36,"line_end":36,"column_start":1,"column_end":27}},{"value":"/ ```ignore","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":15142,"byte_end":15155,"line_start":37,"line_end":37,"column_start":1,"column_end":14}},{"value":"/ fn reinit(&self, val: T) -> Result<Rc<T>, T>;","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":15156,"byte_end":15205,"line_start":38,"line_end":38,"column_start":1,"column_end":50}},{"value":"/ ```","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":15206,"byte_end":15213,"line_start":39,"line_end":39,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":198},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":17486,"byte_end":17489,"line_start":101,"line_end":101,"column_start":12,"column_end":15},"name":"new","qualname":"<Rc>::new","value":"pub fn new(T, Uninit) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `Rc<T>`.","sig":null,"attributes":[{"value":"/ Constructs a new `Rc<T>`.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":16638,"byte_end":16667,"line_start":76,"line_end":76,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":16672,"byte_end":16675,"line_start":77,"line_end":77,"column_start":5,"column_end":8}},{"value":"/ See also [`Bump::rc`], which encapsulates the process of allocation and construction in a","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":16680,"byte_end":16773,"line_start":78,"line_end":78,"column_start":5,"column_end":98}},{"value":"/ single method call.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":16778,"byte_end":16801,"line_start":79,"line_end":79,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":16806,"byte_end":16809,"line_start":80,"line_end":80,"column_start":5,"column_end":8}},{"value":"/ ## Panics","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":16814,"byte_end":16827,"line_start":81,"line_end":81,"column_start":5,"column_end":18}},{"value":"/ This function panics if the memory is not valid for the layout of [`Rc::layout`].","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":16832,"byte_end":16917,"line_start":82,"line_end":82,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":16922,"byte_end":16925,"line_start":83,"line_end":83,"column_start":5,"column_end":8}},{"value":"/ ## Examples","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":16930,"byte_end":16945,"line_start":84,"line_end":84,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":16950,"byte_end":16953,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":16958,"byte_end":16965,"line_start":86,"line_end":86,"column_start":5,"column_end":12}},{"value":"/ use core::convert::TryInto;","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":16970,"byte_end":17001,"line_start":87,"line_end":87,"column_start":5,"column_end":36}},{"value":"/ use without_alloc::{alloc::LocalAllocLeakExt, rc::Rc};","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":17006,"byte_end":17064,"line_start":88,"line_end":88,"column_start":5,"column_end":63}},{"value":"/ use static_alloc::Bump;","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":17069,"byte_end":17096,"line_start":89,"line_end":89,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":17101,"byte_end":17104,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ struct Foo(u32);","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":17109,"byte_end":17129,"line_start":91,"line_end":91,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":17134,"byte_end":17137,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ let slab: Bump<[u8; 1024]> = Bump::uninit();","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":17142,"byte_end":17190,"line_start":93,"line_end":93,"column_start":5,"column_end":53}},{"value":"/ let layout = Rc::<Foo>::layout().try_into().unwrap();","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":17195,"byte_end":17252,"line_start":94,"line_end":94,"column_start":5,"column_end":62}},{"value":"/ let memory = slab.alloc_layout(layout).unwrap();","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":17257,"byte_end":17309,"line_start":95,"line_end":95,"column_start":5,"column_end":57}},{"value":"/ let rc = Rc::new(Foo(0), memory.uninit);","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":17314,"byte_end":17358,"line_start":96,"line_end":96,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":17363,"byte_end":17370,"line_start":97,"line_end":97,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":17375,"byte_end":17378,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ [`Rc::layout`]: #method.layout","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":17383,"byte_end":17417,"line_start":99,"line_end":99,"column_start":5,"column_end":39}},{"value":"/ [`Bump::rc`]: ../slab/struct.Bump.html#method.rc","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":17422,"byte_end":17474,"line_start":100,"line_end":100,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":199},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":18139,"byte_end":18147,"line_start":121,"line_end":121,"column_start":19,"column_end":27},"name":"from_raw","qualname":"<Rc>::from_raw","value":"pub unsafe fn from_raw(Uninit) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Wrap a raw initialized value back into an `Rc`.","sig":null,"attributes":[{"value":"/ Wrap a raw initialized value back into an `Rc`.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":17890,"byte_end":17941,"line_start":116,"line_end":116,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":17946,"byte_end":17949,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ ## Safety","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":17954,"byte_end":17967,"line_start":118,"line_end":118,"column_start":5,"column_end":18}},{"value":"/ The block must originate from a previous call to [`into_raw`] and only the value must have","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":17972,"byte_end":18066,"line_start":119,"line_end":119,"column_start":5,"column_end":99}},{"value":"/ been modified. The value must still be valid.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":18071,"byte_end":18120,"line_start":120,"line_end":120,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":200},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":19217,"byte_end":19225,"line_start":156,"line_end":156,"column_start":12,"column_end":20},"name":"into_raw","qualname":"<Rc>::into_raw","value":"pub fn into_raw(Self) -> Result<Uninit, Self>","parent":null,"children":[],"decl_id":null,"docs":" Try to extract the memory.","sig":null,"attributes":[{"value":"/ Try to extract the memory.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":18384,"byte_end":18414,"line_start":130,"line_end":130,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":18419,"byte_end":18422,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ This returns `Some` only when this is the last strong *and* weak reference to the value.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":18427,"byte_end":18519,"line_start":132,"line_end":132,"column_start":5,"column_end":97}},{"value":"/ The contained value will be preserved and is not dropped. Use `from_raw` to reinitialize a","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":18524,"byte_end":18618,"line_start":133,"line_end":133,"column_start":5,"column_end":99}},{"value":"/ new `Rc` with the old value and memory.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":18623,"byte_end":18666,"line_start":134,"line_end":134,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":18671,"byte_end":18674,"line_start":135,"line_end":135,"column_start":5,"column_end":8}},{"value":"/ ## Example","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":18679,"byte_end":18693,"line_start":136,"line_end":136,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":18698,"byte_end":18701,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":18706,"byte_end":18713,"line_start":138,"line_end":138,"column_start":5,"column_end":12}},{"value":"/ use without_alloc::{alloc::LocalAllocLeakExt, rc::Rc};","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":18718,"byte_end":18776,"line_start":139,"line_end":139,"column_start":5,"column_end":63}},{"value":"/ use static_alloc::Bump;","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":18781,"byte_end":18808,"line_start":140,"line_end":140,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":18813,"byte_end":18816,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ struct HotPotato;","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":18821,"byte_end":18842,"line_start":142,"line_end":142,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":18847,"byte_end":18850,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ impl Drop for HotPotato {","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":18855,"byte_end":18884,"line_start":144,"line_end":144,"column_start":5,"column_end":34}},{"value":"/     fn drop(&mut self) {","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":18889,"byte_end":18917,"line_start":145,"line_end":145,"column_start":5,"column_end":33}},{"value":"/         panic!(\"dropped!\");","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":18922,"byte_end":18953,"line_start":146,"line_end":146,"column_start":5,"column_end":36}},{"value":"/     }","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":18958,"byte_end":18967,"line_start":147,"line_end":147,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":18972,"byte_end":18977,"line_start":148,"line_end":148,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":18982,"byte_end":18985,"line_start":149,"line_end":149,"column_start":5,"column_end":8}},{"value":"/ let slab: Bump<[u8; 1024]> = Bump::uninit();","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":18990,"byte_end":19038,"line_start":150,"line_end":150,"column_start":5,"column_end":53}},{"value":"/ let foo = slab.rc(HotPotato).unwrap();","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":19043,"byte_end":19085,"line_start":151,"line_end":151,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":19090,"byte_end":19093,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ let raw = Rc::into_raw(foo).ok().unwrap();","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":19098,"byte_end":19144,"line_start":153,"line_end":153,"column_start":5,"column_end":51}},{"value":"/ // No panic. Value has not been dropped.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":19149,"byte_end":19193,"line_start":154,"line_end":154,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":19198,"byte_end":19205,"line_start":155,"line_end":155,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":201},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":20204,"byte_end":20214,"line_start":178,"line_end":178,"column_start":12,"column_end":22},"name":"try_unwrap","qualname":"<Rc>::try_unwrap","value":"pub fn try_unwrap(Self) -> Result<(T, Weak), Self>","parent":null,"children":[],"decl_id":null,"docs":" Returns the contained value, if the `Rc` has exactly one strong reference.","sig":null,"attributes":[{"value":"/ Returns the contained value, if the `Rc` has exactly one strong reference.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":19777,"byte_end":19855,"line_start":172,"line_end":172,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":19860,"byte_end":19863,"line_start":173,"line_end":173,"column_start":5,"column_end":8}},{"value":"/ Also returns the managed memory in the form of a `Weak`. This is unusual but the best","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":19868,"byte_end":19957,"line_start":174,"line_end":174,"column_start":5,"column_end":94}},{"value":"/ choice for potentially recovering it. Returning the memory directly is not possible since","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":19962,"byte_end":20055,"line_start":175,"line_end":175,"column_start":5,"column_end":98}},{"value":"/ other `Weak<T>` instances may still point to it. If you are not interested in the memory","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":20060,"byte_end":20152,"line_start":176,"line_end":176,"column_start":5,"column_end":97}},{"value":"/ you can simply drop the `Weak`.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":20157,"byte_end":20192,"line_start":177,"line_end":177,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":202},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":21125,"byte_end":21134,"line_start":213,"line_end":213,"column_start":12,"column_end":21},"name":"downgrade","qualname":"<Rc>::downgrade","value":"pub fn downgrade(&Self) -> Weak","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Weak` pointer to the value.","sig":null,"attributes":[{"value":"/ Create a new `Weak` pointer to the value.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":20525,"byte_end":20570,"line_start":192,"line_end":192,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":20575,"byte_end":20578,"line_start":193,"line_end":193,"column_start":5,"column_end":8}},{"value":"/ The weak pointer shares ownership over the memory but not over the value itself.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":20583,"byte_end":20667,"line_start":194,"line_end":194,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":20672,"byte_end":20675,"line_start":195,"line_end":195,"column_start":5,"column_end":8}},{"value":"/ ## Example","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":20680,"byte_end":20694,"line_start":196,"line_end":196,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":20699,"byte_end":20702,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":20707,"byte_end":20714,"line_start":198,"line_end":198,"column_start":5,"column_end":12}},{"value":"/ use without_alloc::{alloc::LocalAllocLeakExt, rc::Rc};","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":20719,"byte_end":20777,"line_start":199,"line_end":199,"column_start":5,"column_end":63}},{"value":"/ use static_alloc::Bump;","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":20782,"byte_end":20809,"line_start":200,"line_end":200,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":20814,"byte_end":20817,"line_start":201,"line_end":201,"column_start":5,"column_end":8}},{"value":"/ struct Foo;","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":20822,"byte_end":20837,"line_start":202,"line_end":202,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":20842,"byte_end":20845,"line_start":203,"line_end":203,"column_start":5,"column_end":8}},{"value":"/ let slab: Bump<[u8; 1024]> = Bump::uninit();","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":20850,"byte_end":20898,"line_start":204,"line_end":204,"column_start":5,"column_end":53}},{"value":"/ let foo = slab.rc(Foo).unwrap();","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":20903,"byte_end":20939,"line_start":205,"line_end":205,"column_start":5,"column_end":41}},{"value":"/ let weak = Rc::downgrade(&foo);","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":20944,"byte_end":20979,"line_start":206,"line_end":206,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":20984,"byte_end":20987,"line_start":207,"line_end":207,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Rc::weak_count(&foo), 2);","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":20992,"byte_end":21032,"line_start":208,"line_end":208,"column_start":5,"column_end":45}},{"value":"/ drop(foo);","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":21037,"byte_end":21051,"line_start":209,"line_end":209,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":21056,"byte_end":21059,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(weak.weak_count(), 1);","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":21064,"byte_end":21101,"line_start":211,"line_end":211,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":21106,"byte_end":21113,"line_start":212,"line_end":212,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":205},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":22128,"byte_end":22134,"line_start":243,"line_end":243,"column_start":12,"column_end":18},"name":"layout","qualname":"<Rc>::layout","value":"pub fn layout() -> Layout","parent":null,"children":[],"decl_id":null,"docs":" Get the layout for memory passed to [`Rc::new`].","sig":null,"attributes":[{"value":"/ Get the layout for memory passed to [`Rc::new`].","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":21252,"byte_end":21304,"line_start":220,"line_end":220,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":21309,"byte_end":21312,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ You should not rely on the value returned here. The two guarantees are: the size of the","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":21317,"byte_end":21408,"line_start":222,"line_end":222,"column_start":5,"column_end":96}},{"value":"/ layout is at least as large as the input type and it is never empty.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":21413,"byte_end":21485,"line_start":223,"line_end":223,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":21490,"byte_end":21493,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ An `Rc` does not simply point to a lone instance of a type but instead adds some small","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":21498,"byte_end":21588,"line_start":225,"line_end":225,"column_start":5,"column_end":95}},{"value":"/ metadata (two pointer-sized counters). To keep the implementation details private, this","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":21593,"byte_end":21684,"line_start":226,"line_end":226,"column_start":5,"column_end":96}},{"value":"/ method allows allocation of properly sized regions without exposing the exact type that","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":21689,"byte_end":21780,"line_start":227,"line_end":227,"column_start":5,"column_end":96}},{"value":"/ will be stored on the heap.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":21785,"byte_end":21816,"line_start":228,"line_end":228,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":21821,"byte_end":21824,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ ## Examples","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":21829,"byte_end":21844,"line_start":230,"line_end":230,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":21849,"byte_end":21852,"line_start":231,"line_end":231,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":21857,"byte_end":21864,"line_start":232,"line_end":232,"column_start":5,"column_end":12}},{"value":"/ use without_alloc::rc::Rc;","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":21869,"byte_end":21899,"line_start":233,"line_end":233,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":21904,"byte_end":21907,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ struct Foo(u32);","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":21912,"byte_end":21932,"line_start":235,"line_end":235,"column_start":5,"column_end":25}},{"value":"/ struct Empty;","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":21937,"byte_end":21954,"line_start":236,"line_end":236,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":21959,"byte_end":21962,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ assert!(Rc::<Foo>::layout().size() >= 4);","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":21967,"byte_end":22012,"line_start":238,"line_end":238,"column_start":5,"column_end":50}},{"value":"/ assert!(Rc::<Empty>::layout().size() > 0);","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":22017,"byte_end":22063,"line_start":239,"line_end":239,"column_start":5,"column_end":51}},{"value":"/ ```","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":22068,"byte_end":22075,"line_start":240,"line_end":240,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":22080,"byte_end":22083,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ [`Rc::new`]: #method.new","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":22088,"byte_end":22116,"line_start":242,"line_end":242,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":206},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":22431,"byte_end":22441,"line_start":251,"line_end":251,"column_start":12,"column_end":22},"name":"weak_count","qualname":"<Rc>::weak_count","value":"pub fn weak_count(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Gets the number of weak pointers to the value.","sig":null,"attributes":[{"value":"/ Gets the number of weak pointers to the value.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":22280,"byte_end":22330,"line_start":248,"line_end":248,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":22335,"byte_end":22338,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ Note that all `Rc` to the same value count as one weak pointer in total.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":22343,"byte_end":22419,"line_start":250,"line_end":250,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":207},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":22569,"byte_end":22581,"line_start":256,"line_end":256,"column_start":12,"column_end":24},"name":"strong_count","qualname":"<Rc>::strong_count","value":"pub fn strong_count(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Gets the number of strong pointers to the value.\n","sig":null,"attributes":[{"value":"/ Gets the number of strong pointers to the value.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":22505,"byte_end":22557,"line_start":255,"line_end":255,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":208},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":22851,"byte_end":22858,"line_start":264,"line_end":264,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Rc>::get_mut","value":"pub fn get_mut(&mut Self) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":" Try to retrieve a mutable reference to the value.","sig":null,"attributes":[{"value":"/ Try to retrieve a mutable reference to the value.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":22647,"byte_end":22700,"line_start":260,"line_end":260,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":22705,"byte_end":22708,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ This method will only succeed if there are no other pointers to the same value, neither","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":22713,"byte_end":22804,"line_start":262,"line_end":262,"column_start":5,"column_end":96}},{"value":"/ strong ones nor weak ones.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":22809,"byte_end":22839,"line_start":263,"line_end":263,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":209},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":23737,"byte_end":23743,"line_start":296,"line_end":296,"column_start":12,"column_end":18},"name":"ptr_eq","qualname":"<Rc>::ptr_eq","value":"pub fn ptr_eq(&Self, &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if two `Rc`s point to the same data.","sig":null,"attributes":[{"value":"/ Check if two `Rc`s point to the same data.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":23028,"byte_end":23074,"line_start":272,"line_end":272,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":23079,"byte_end":23082,"line_start":273,"line_end":273,"column_start":5,"column_end":8}},{"value":"/ This will never compare the values but simply inspect the inner pointers.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":23087,"byte_end":23164,"line_start":274,"line_end":274,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":23169,"byte_end":23172,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ ## Example","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":23177,"byte_end":23191,"line_start":276,"line_end":276,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":23196,"byte_end":23199,"line_start":277,"line_end":277,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":23204,"byte_end":23211,"line_start":278,"line_end":278,"column_start":5,"column_end":12}},{"value":"/ use without_alloc::{alloc::LocalAllocLeakExt, rc::Rc};","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":23216,"byte_end":23274,"line_start":279,"line_end":279,"column_start":5,"column_end":63}},{"value":"/ use static_alloc::Bump;","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":23279,"byte_end":23306,"line_start":280,"line_end":280,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":23311,"byte_end":23314,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ struct Foo;","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":23319,"byte_end":23334,"line_start":282,"line_end":282,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":23339,"byte_end":23342,"line_start":283,"line_end":283,"column_start":5,"column_end":8}},{"value":"/ let slab: Bump<[u8; 1024]> = Bump::uninit();","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":23347,"byte_end":23395,"line_start":284,"line_end":284,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":23400,"byte_end":23403,"line_start":285,"line_end":285,"column_start":5,"column_end":8}},{"value":"/ // Two Rc's pointing to the same data.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":23408,"byte_end":23450,"line_start":286,"line_end":286,"column_start":5,"column_end":47}},{"value":"/ let foo = slab.rc(Foo).unwrap();","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":23455,"byte_end":23491,"line_start":287,"line_end":287,"column_start":5,"column_end":41}},{"value":"/ let foo2 = Rc::clone(&foo);","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":23496,"byte_end":23527,"line_start":288,"line_end":288,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":23532,"byte_end":23535,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/ // An unrelated allocation.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":23540,"byte_end":23571,"line_start":290,"line_end":290,"column_start":5,"column_end":36}},{"value":"/ let not_foo = slab.rc(Foo).unwrap();","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":23576,"byte_end":23616,"line_start":291,"line_end":291,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":23621,"byte_end":23624,"line_start":292,"line_end":292,"column_start":5,"column_end":8}},{"value":"/ assert!( Rc::ptr_eq(&foo, &foo2));","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":23629,"byte_end":23667,"line_start":293,"line_end":293,"column_start":5,"column_end":43}},{"value":"/ assert!(!Rc::ptr_eq(&foo, &not_foo));","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":23672,"byte_end":23713,"line_start":294,"line_end":294,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":23718,"byte_end":23725,"line_start":295,"line_end":295,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":221},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":25872,"byte_end":25882,"line_start":371,"line_end":371,"column_start":12,"column_end":22},"name":"try_unwrap","qualname":"<Weak>::try_unwrap","value":"pub fn try_unwrap(Self) -> Result<Uninit, Self>","parent":null,"children":[],"decl_id":null,"docs":" Try to unwrap the original allocation of the `Rc`.","sig":null,"attributes":[{"value":"/ Try to unwrap the original allocation of the `Rc`.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":25185,"byte_end":25239,"line_start":351,"line_end":351,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":25244,"byte_end":25247,"line_start":352,"line_end":352,"column_start":5,"column_end":8}},{"value":"/ This will only work when this is the only pointer to the allocation. That is, there are","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":25252,"byte_end":25343,"line_start":353,"line_end":353,"column_start":5,"column_end":96}},{"value":"/ neither `Weak` nor `Rc` still pointing at it.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":25348,"byte_end":25397,"line_start":354,"line_end":354,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":25402,"byte_end":25405,"line_start":355,"line_end":355,"column_start":5,"column_end":8}},{"value":"/ ## Example","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":25410,"byte_end":25424,"line_start":356,"line_end":356,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":25429,"byte_end":25432,"line_start":357,"line_end":357,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":25437,"byte_end":25444,"line_start":358,"line_end":358,"column_start":5,"column_end":12}},{"value":"/ use without_alloc::{alloc::LocalAllocLeakExt, rc::Rc};","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":25449,"byte_end":25507,"line_start":359,"line_end":359,"column_start":5,"column_end":63}},{"value":"/ use static_alloc::Bump;","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":25512,"byte_end":25539,"line_start":360,"line_end":360,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":25544,"byte_end":25547,"line_start":361,"line_end":361,"column_start":5,"column_end":8}},{"value":"/ struct Foo;","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":25552,"byte_end":25567,"line_start":362,"line_end":362,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":25572,"byte_end":25575,"line_start":363,"line_end":363,"column_start":5,"column_end":8}},{"value":"/ let slab: Bump<[u8; 1024]> = Bump::uninit();","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":25580,"byte_end":25628,"line_start":364,"line_end":364,"column_start":5,"column_end":53}},{"value":"/ let rc = slab.rc(Foo).unwrap();","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":25633,"byte_end":25668,"line_start":365,"line_end":365,"column_start":5,"column_end":40}},{"value":"/ let (_, weak) = Rc::try_unwrap(rc).ok().unwrap();","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":25673,"byte_end":25726,"line_start":366,"line_end":366,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":25731,"byte_end":25734,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ // This is the only one pointing at the allocation.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":25739,"byte_end":25794,"line_start":368,"line_end":368,"column_start":5,"column_end":60}},{"value":"/ let memory = weak.try_unwrap().ok().unwrap();","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":25799,"byte_end":25848,"line_start":369,"line_end":369,"column_start":5,"column_end":54}},{"value":"/ ```","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":25853,"byte_end":25860,"line_start":370,"line_end":370,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":222},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":27150,"byte_end":27157,"line_start":408,"line_end":408,"column_start":12,"column_end":19},"name":"upgrade","qualname":"<Weak>::upgrade","value":"pub fn upgrade(&Self) -> Option<Rc>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to upgrade to a shared pointer to the value.","sig":null,"attributes":[{"value":"/ Attempt to upgrade to a shared pointer to the value.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":26403,"byte_end":26459,"line_start":386,"line_end":386,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":26464,"byte_end":26467,"line_start":387,"line_end":387,"column_start":5,"column_end":8}},{"value":"/ This operation will only succeed if there are still strong pointers to the value, i.e.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":26472,"byte_end":26562,"line_start":388,"line_end":388,"column_start":5,"column_end":95}},{"value":"/ `strong_count` is not zero. Then the value has not been dropped yet and its lifetime is","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":26567,"byte_end":26658,"line_start":389,"line_end":389,"column_start":5,"column_end":96}},{"value":"/ extended.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":26663,"byte_end":26676,"line_start":390,"line_end":390,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":26681,"byte_end":26684,"line_start":391,"line_end":391,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":26689,"byte_end":26696,"line_start":392,"line_end":392,"column_start":5,"column_end":12}},{"value":"/ use without_alloc::{alloc::LocalAllocLeakExt, rc::Rc};","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":26701,"byte_end":26759,"line_start":393,"line_end":393,"column_start":5,"column_end":63}},{"value":"/ use static_alloc::Bump;","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":26764,"byte_end":26791,"line_start":394,"line_end":394,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":26796,"byte_end":26799,"line_start":395,"line_end":395,"column_start":5,"column_end":8}},{"value":"/ let memory: Bump<[u8; 1024]> = Bump::uninit();","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":26804,"byte_end":26854,"line_start":396,"line_end":396,"column_start":5,"column_end":55}},{"value":"/ let rc = memory.rc(0usize).unwrap();","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":26859,"byte_end":26899,"line_start":397,"line_end":397,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":26904,"byte_end":26907,"line_start":398,"line_end":398,"column_start":5,"column_end":8}},{"value":"/ let weak = Rc::downgrade(&rc);","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":26912,"byte_end":26946,"line_start":399,"line_end":399,"column_start":5,"column_end":39}},{"value":"/ let rc2 = weak.upgrade().unwrap();","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":26951,"byte_end":26989,"line_start":400,"line_end":400,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":26994,"byte_end":26997,"line_start":401,"line_end":401,"column_start":5,"column_end":8}},{"value":"/ drop(rc);","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":27002,"byte_end":27015,"line_start":402,"line_end":402,"column_start":5,"column_end":18}},{"value":"/ drop(rc2);","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":27020,"byte_end":27034,"line_start":403,"line_end":403,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":27039,"byte_end":27042,"line_start":404,"line_end":404,"column_start":5,"column_end":8}},{"value":"/ // No more strong pointers left.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":27047,"byte_end":27083,"line_start":405,"line_end":405,"column_start":5,"column_end":41}},{"value":"/ assert!(weak.upgrade().is_none());","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":27088,"byte_end":27126,"line_start":406,"line_end":406,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":27131,"byte_end":27138,"line_start":407,"line_end":407,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":225},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":27928,"byte_end":27940,"line_start":437,"line_end":437,"column_start":12,"column_end":24},"name":"strong_count","qualname":"<Weak>::strong_count","value":"pub fn strong_count(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Gets the number of strong pointers pointing at the value.","sig":null,"attributes":[{"value":"/ Gets the number of strong pointers pointing at the value.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":27403,"byte_end":27464,"line_start":420,"line_end":420,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":27469,"byte_end":27472,"line_start":421,"line_end":421,"column_start":5,"column_end":8}},{"value":"/ ## Example","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":27477,"byte_end":27491,"line_start":422,"line_end":422,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":27496,"byte_end":27499,"line_start":423,"line_end":423,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":27504,"byte_end":27511,"line_start":424,"line_end":424,"column_start":5,"column_end":12}},{"value":"/ use without_alloc::{alloc::LocalAllocLeakExt, rc::Rc, rc::Weak};","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":27516,"byte_end":27584,"line_start":425,"line_end":425,"column_start":5,"column_end":73}},{"value":"/ use static_alloc::Bump;","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":27589,"byte_end":27616,"line_start":426,"line_end":426,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":27621,"byte_end":27624,"line_start":427,"line_end":427,"column_start":5,"column_end":8}},{"value":"/ struct Foo;","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":27629,"byte_end":27644,"line_start":428,"line_end":428,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":27649,"byte_end":27652,"line_start":429,"line_end":429,"column_start":5,"column_end":8}},{"value":"/ let slab: Bump<[u8; 1024]> = Bump::uninit();","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":27657,"byte_end":27705,"line_start":430,"line_end":430,"column_start":5,"column_end":53}},{"value":"/ let rc = slab.rc(Foo).unwrap();","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":27710,"byte_end":27745,"line_start":431,"line_end":431,"column_start":5,"column_end":40}},{"value":"/ let (_, weak) = Rc::try_unwrap(rc).ok().unwrap();","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":27750,"byte_end":27803,"line_start":432,"line_end":432,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":27808,"byte_end":27811,"line_start":433,"line_end":433,"column_start":5,"column_end":8}},{"value":"/ // We just destroyed the only one.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":27816,"byte_end":27854,"line_start":434,"line_end":434,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(Weak::strong_count(&weak), 0);","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":27859,"byte_end":27904,"line_start":435,"line_end":435,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":27909,"byte_end":27916,"line_start":436,"line_end":436,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":226},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":28536,"byte_end":28546,"line_start":458,"line_end":458,"column_start":12,"column_end":22},"name":"weak_count","qualname":"<Weak>::weak_count","value":"pub fn weak_count(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Gets the number of weak pointers pointing at the value.","sig":null,"attributes":[{"value":"/ Gets the number of weak pointers pointing at the value.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":27998,"byte_end":28057,"line_start":441,"line_end":441,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":28062,"byte_end":28065,"line_start":442,"line_end":442,"column_start":5,"column_end":8}},{"value":"/ ## Example","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":28070,"byte_end":28084,"line_start":443,"line_end":443,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":28089,"byte_end":28092,"line_start":444,"line_end":444,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":28097,"byte_end":28104,"line_start":445,"line_end":445,"column_start":5,"column_end":12}},{"value":"/ use without_alloc::{alloc::LocalAllocLeakExt, rc::Rc, rc::Weak};","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":28109,"byte_end":28177,"line_start":446,"line_end":446,"column_start":5,"column_end":73}},{"value":"/ use static_alloc::Bump;","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":28182,"byte_end":28209,"line_start":447,"line_end":447,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":28214,"byte_end":28217,"line_start":448,"line_end":448,"column_start":5,"column_end":8}},{"value":"/ struct Foo;","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":28222,"byte_end":28237,"line_start":449,"line_end":449,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":28242,"byte_end":28245,"line_start":450,"line_end":450,"column_start":5,"column_end":8}},{"value":"/ let slab: Bump<[u8; 1024]> = Bump::uninit();","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":28250,"byte_end":28298,"line_start":451,"line_end":451,"column_start":5,"column_end":53}},{"value":"/ let rc = slab.rc(Foo).unwrap();","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":28303,"byte_end":28338,"line_start":452,"line_end":452,"column_start":5,"column_end":40}},{"value":"/ let (_, weak) = Rc::try_unwrap(rc).ok().unwrap();","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":28343,"byte_end":28396,"line_start":453,"line_end":453,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":28401,"byte_end":28404,"line_start":454,"line_end":454,"column_start":5,"column_end":8}},{"value":"/ // This is the only one pointing at the allocation.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":28409,"byte_end":28464,"line_start":455,"line_end":455,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(Weak::weak_count(&weak), 1);","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":28469,"byte_end":28512,"line_start":456,"line_end":456,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":28517,"byte_end":28524,"line_start":457,"line_end":457,"column_start":5,"column_end":12}}]},{"kind":"Mod","id":{"krate":0,"index":287},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"uninit","qualname":"::uninit","value":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","parent":null,"children":[{"krate":0,"index":288},{"krate":0,"index":289},{"krate":0,"index":292},{"krate":0,"index":295},{"krate":0,"index":298},{"krate":0,"index":301},{"krate":0,"index":304},{"krate":0,"index":305},{"krate":0,"index":307},{"krate":0,"index":310},{"krate":0,"index":315},{"krate":0,"index":322},{"krate":0,"index":325},{"krate":0,"index":333},{"krate":0,"index":336},{"krate":0,"index":357},{"krate":0,"index":369},{"krate":0,"index":378},{"krate":0,"index":382},{"krate":0,"index":390},{"krate":0,"index":393},{"krate":0,"index":408},{"krate":0,"index":420},{"krate":0,"index":426},{"krate":0,"index":430},{"krate":0,"index":434},{"krate":0,"index":438},{"krate":0,"index":442},{"krate":0,"index":445},{"krate":0,"index":448},{"krate":0,"index":452},{"krate":0,"index":455},{"krate":0,"index":458},{"krate":0,"index":461}],"decl_id":null,"docs":" Safe abstractions around pointing at uninitialized memory without references.","sig":null,"attributes":[{"value":"/ Safe abstractions around pointing at uninitialized memory without references.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":36428,"byte_end":36509,"line_start":1,"line_end":1,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":36510,"byte_end":36513,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ It is potentially **UB** to have references to uninitialized memory even if such a reference is","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":36514,"byte_end":36613,"line_start":3,"line_end":3,"column_start":1,"column_end":100}},{"value":"/ not 'used' in any particular manner. See [the discussion of the unsafe working group][wg-ref].","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":36614,"byte_end":36712,"line_start":4,"line_end":4,"column_start":1,"column_end":99}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":36713,"byte_end":36716,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ [wg-ref]: https://github.com/rust-lang/unsafe-code-guidelines/issues/77","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":36717,"byte_end":36792,"line_start":6,"line_end":6,"column_start":1,"column_end":76}}]},{"kind":"Struct","id":{"krate":0,"index":310},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":38952,"byte_end":38958,"line_start":64,"line_end":64,"column_start":12,"column_end":18},"name":"Uninit","qualname":"::uninit::Uninit","value":"Uninit {  }","parent":null,"children":[{"krate":0,"index":313},{"krate":0,"index":314}],"decl_id":null,"docs":" Points to an uninitialized place but would otherwise be a valid reference.","sig":null,"attributes":[{"value":"/ Points to an uninitialized place but would otherwise be a valid reference.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":36908,"byte_end":36986,"line_start":13,"line_end":13,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":36987,"byte_end":36990,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ This is a `&mut`-like struct that is somewhat of a pendant to `MaybeUninit`. It makes it","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":36991,"byte_end":37083,"line_start":15,"line_end":15,"column_start":1,"column_end":93}},{"value":"/ possible to deal with uninitialized allocations without requiring an `unsafe` block","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":37084,"byte_end":37171,"line_start":16,"line_end":16,"column_start":1,"column_end":88}},{"value":"/ initializing them and offers a much safer interface for partial initialization and layout","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":37172,"byte_end":37265,"line_start":17,"line_end":17,"column_start":1,"column_end":94}},{"value":"/ calculations than raw pointers.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":37266,"byte_end":37301,"line_start":18,"line_end":18,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":37302,"byte_end":37305,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ Note that it also supports slices which means it does not use `MaybeUninit` internally but","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":37306,"byte_end":37400,"line_start":20,"line_end":20,"column_start":1,"column_end":95}},{"value":"/ offers conversion where necessary.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":37401,"byte_end":37439,"line_start":21,"line_end":21,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":37440,"byte_end":37443,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ ## Usage","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":37444,"byte_end":37456,"line_start":23,"line_end":23,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":37457,"byte_end":37460,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ The basic usage is also interacting with `MaybeUninit`:","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":37461,"byte_end":37520,"line_start":25,"line_end":25,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":37521,"byte_end":37524,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":37525,"byte_end":37532,"line_start":27,"line_end":27,"column_start":1,"column_end":8}},{"value":"/ # #[derive(Default)]","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":37533,"byte_end":37557,"line_start":28,"line_end":28,"column_start":1,"column_end":25}},{"value":"/ # struct MyStruct { };","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":37558,"byte_end":37584,"line_start":29,"line_end":29,"column_start":1,"column_end":27}},{"value":"/ use core::mem::MaybeUninit;","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":37585,"byte_end":37616,"line_start":30,"line_end":30,"column_start":1,"column_end":32}},{"value":"/ use without_alloc::Uninit;","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":37617,"byte_end":37647,"line_start":31,"line_end":31,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":37648,"byte_end":37651,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ let mut alloc: MaybeUninit<MyStruct> = MaybeUninit::uninit();","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":37652,"byte_end":37717,"line_start":33,"line_end":33,"column_start":1,"column_end":66}},{"value":"/ let uninit = Uninit::from_maybe_uninit(&mut alloc);","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":37718,"byte_end":37773,"line_start":34,"line_end":34,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":37774,"byte_end":37777,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ // notice: no unsafe","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":37778,"byte_end":37802,"line_start":36,"line_end":36,"column_start":1,"column_end":25}},{"value":"/ let instance: &mut MyStruct = uninit.init(MyStruct::default());","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":37803,"byte_end":37870,"line_start":37,"line_end":37,"column_start":1,"column_end":68}},{"value":"/ ```","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":37871,"byte_end":37878,"line_start":38,"line_end":38,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":37879,"byte_end":37882,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ But since we are working on arbitrary uninitialized memory it is also possible to reuse the","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":37883,"byte_end":37978,"line_start":40,"line_end":40,"column_start":1,"column_end":96}},{"value":"/ structure for completely arbitrary other types. Just note that there is no integrated mechanis","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":37979,"byte_end":38077,"line_start":41,"line_end":41,"column_start":1,"column_end":99}},{"value":"/ for calling `Drop`.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":38078,"byte_end":38101,"line_start":42,"line_end":42,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":38102,"byte_end":38105,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":38106,"byte_end":38113,"line_start":44,"line_end":44,"column_start":1,"column_end":8}},{"value":"/ use core::mem::MaybeUninit;","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":38114,"byte_end":38145,"line_start":45,"line_end":45,"column_start":1,"column_end":32}},{"value":"/ use without_alloc::Uninit;","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":38146,"byte_end":38176,"line_start":46,"line_end":46,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":38177,"byte_end":38180,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ // Just a generic buffer.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":38181,"byte_end":38210,"line_start":48,"line_end":48,"column_start":1,"column_end":30}},{"value":"/ let mut alloc: MaybeUninit<[u32; 1024]> = MaybeUninit::uninit();","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":38211,"byte_end":38279,"line_start":49,"line_end":49,"column_start":1,"column_end":69}},{"value":"/ let uninit = Uninit::from_maybe_uninit(&mut alloc);","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":38280,"byte_end":38335,"line_start":50,"line_end":50,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":38336,"byte_end":38339,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ // Now use the first `u32` for a counter:","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":38340,"byte_end":38385,"line_start":52,"line_end":52,"column_start":1,"column_end":46}},{"value":"/ let mut counter = uninit.cast().unwrap();","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":38386,"byte_end":38431,"line_start":53,"line_end":53,"column_start":1,"column_end":46}},{"value":"/ let mut tail = counter.split_to_fit();","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":38432,"byte_end":38474,"line_start":54,"line_end":54,"column_start":1,"column_end":43}},{"value":"/ let counter: &mut u32 = counter.init(0);","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":38475,"byte_end":38519,"line_start":55,"line_end":55,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":38520,"byte_end":38523,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ // And some more for a few `u64`.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":38524,"byte_end":38561,"line_start":57,"line_end":57,"column_start":1,"column_end":38}},{"value":"/ // Note that these are not trivially aligned, but `Uninit` does that for us.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":38562,"byte_end":38642,"line_start":58,"line_end":58,"column_start":1,"column_end":81}},{"value":"/ let mut values = tail.split_cast().unwrap();","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":38643,"byte_end":38691,"line_start":59,"line_end":59,"column_start":1,"column_end":49}},{"value":"/ // No more use, so don't bother with `split_to_fit` and just `init`.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":38692,"byte_end":38764,"line_start":60,"line_end":60,"column_start":1,"column_end":73}},{"value":"/ let values: &mut [u64; 2] = values.init([0xdead, 0xbeef]);","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":38765,"byte_end":38827,"line_start":61,"line_end":61,"column_start":1,"column_end":63}},{"value":"/ ```","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":38828,"byte_end":38835,"line_start":62,"line_end":62,"column_start":1,"column_end":8}},{"value":"must_use =\n  \"This is a pointer-like type that has no effect on its own. Use `init` to insert a value.\"","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":38836,"byte_end":38940,"line_start":63,"line_end":63,"column_start":1,"column_end":105}}]},{"kind":"Struct","id":{"krate":0,"index":315},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":39748,"byte_end":39758,"line_start":83,"line_end":83,"column_start":12,"column_end":22},"name":"UninitView","qualname":"::uninit::UninitView","value":"UninitView {  }","parent":null,"children":[{"krate":0,"index":318},{"krate":0,"index":319},{"krate":0,"index":320},{"krate":0,"index":321}],"decl_id":null,"docs":" A non-mutable view on a region used in an [`Uninit`].","sig":null,"attributes":[{"value":"/ A non-mutable view on a region used in an [`Uninit`].","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":39204,"byte_end":39261,"line_start":74,"line_end":74,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":39262,"byte_end":39265,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ Makes it possible to utilize the traversal methods (`split*`, `cast*`, ..) without requiring a","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":39266,"byte_end":39364,"line_start":76,"line_end":76,"column_start":1,"column_end":99}},{"value":"/ mutable reference to the original `Uninit`. It will also never expose mutable pointers or","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":39365,"byte_end":39458,"line_start":77,"line_end":77,"column_start":1,"column_end":94}},{"value":"/ accidentally offer an aliased mutable reference. Prefer this to instead avoiding the borrow of","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":39459,"byte_end":39557,"line_start":78,"line_end":78,"column_start":1,"column_end":99}},{"value":"/ the `Uninit` and manually managing pointers to the region.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":39558,"byte_end":39620,"line_start":79,"line_end":79,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":39621,"byte_end":39624,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ [`Uninit`]: ./struct.Uninit.html","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":39625,"byte_end":39661,"line_start":81,"line_end":81,"column_start":1,"column_end":37}},{"value":"must_use = \"This is a pointer-like type that has no effect on its own.\"","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":39662,"byte_end":39736,"line_start":82,"line_end":82,"column_start":1,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":323},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":41200,"byte_end":41211,"line_start":118,"line_end":118,"column_start":19,"column_end":30},"name":"from_memory","qualname":"<Uninit>::from_memory","value":"pub unsafe fn from_memory(ptr::NonNull<u8>, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a uninit pointer from raw memory.","sig":null,"attributes":[{"value":"/ Create a uninit pointer from raw memory.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":40519,"byte_end":40563,"line_start":106,"line_end":106,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":40568,"byte_end":40571,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ ## Safety","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":40576,"byte_end":40589,"line_start":108,"line_end":108,"column_start":5,"column_end":18}},{"value":"/ A valid allocation must exist at the pointer with length at least `len`. There must be *no*","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":40594,"byte_end":40689,"line_start":109,"line_end":109,"column_start":5,"column_end":100}},{"value":"/ references aliasing the memory location, and it must be valid to write uninitialized bytes","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":40694,"byte_end":40788,"line_start":110,"line_end":110,"column_start":5,"column_end":99}},{"value":"/ into arbitrary locations of the region.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":40793,"byte_end":40836,"line_start":111,"line_end":111,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":40841,"byte_end":40844,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ In particular, it is **UB** to create this from a reference to a variable of a type for","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":40849,"byte_end":40940,"line_start":113,"line_end":113,"column_start":5,"column_end":96}},{"value":"/ which a completely uninitialized content is not valid. The standard type for avoiding the","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":40945,"byte_end":41038,"line_start":114,"line_end":114,"column_start":5,"column_end":98}},{"value":"/ UB is `core::mem::MaybeUninit`.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":41043,"byte_end":41078,"line_start":115,"line_end":115,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":41083,"byte_end":41086,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ When in doubt, refactor code such that utilization of `from_maybe_uninit` is possible.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":41091,"byte_end":41181,"line_start":117,"line_end":117,"column_start":5,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":324},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":41580,"byte_end":41592,"line_start":130,"line_end":130,"column_start":12,"column_end":24},"name":"split_layout","qualname":"<Uninit>::split_layout","value":"pub fn split_layout(&mut Self, Layout) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Split so that the second part fits the layout.","sig":null,"attributes":[{"value":"/ Split so that the second part fits the layout.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":41436,"byte_end":41486,"line_start":127,"line_end":127,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":41491,"byte_end":41494,"line_start":128,"line_end":128,"column_start":5,"column_end":8}},{"value":"/ Return `Ok` if this is possible in-bounds and `Err` if it is not.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":41499,"byte_end":41568,"line_start":129,"line_end":129,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":329},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":42328,"byte_end":42338,"line_start":151,"line_end":151,"column_start":12,"column_end":22},"name":"split_cast","qualname":"<Uninit>::split_cast","value":"pub fn split_cast<U>(&mut Self) -> Option<Uninit>","parent":null,"children":[],"decl_id":null,"docs":" Split so that the tail is aligned and valid for a `U`.","sig":null,"attributes":[{"value":"/ Split so that the tail is aligned and valid for a `U`.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":42041,"byte_end":42099,"line_start":146,"line_end":146,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":42104,"byte_end":42107,"line_start":147,"line_end":147,"column_start":5,"column_end":8}},{"value":"/ Return `Ok` if this is possible in-bounds (aligned and enough room for at least one `U`)","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":42112,"byte_end":42204,"line_start":148,"line_end":148,"column_start":5,"column_end":97}},{"value":"/ and `Err` if it is not. The first tuple element is the `Uninit` pointing to the skipped","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":42209,"byte_end":42300,"line_start":149,"line_end":149,"column_start":5,"column_end":96}},{"value":"/ memory.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":42305,"byte_end":42316,"line_start":150,"line_end":150,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":331},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":43020,"byte_end":43031,"line_start":165,"line_end":165,"column_start":12,"column_end":23},"name":"split_slice","qualname":"<Uninit>::split_slice","value":"pub fn split_slice<U>(&mut Self) -> Option<Uninit>","parent":null,"children":[],"decl_id":null,"docs":" Split so that the tail is aligned for a slice `[U]`.","sig":null,"attributes":[{"value":"/ Split so that the tail is aligned for a slice `[U]`.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":42517,"byte_end":42573,"line_start":157,"line_end":157,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":42578,"byte_end":42581,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ Return `Ok` if this is possible in-bounds and `Err` if it is not. The first tuple element","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":42586,"byte_end":42679,"line_start":159,"line_end":159,"column_start":5,"column_end":98}},{"value":"/ is the `Uninit` pointing to the skipped memory.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":42684,"byte_end":42735,"line_start":160,"line_end":160,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":42740,"byte_end":42743,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ The length of the slice is the arbitrary amount that fits into the tail of the allocation.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":42748,"byte_end":42842,"line_start":162,"line_end":162,"column_start":5,"column_end":99}},{"value":"/ Note that the length always fulfills the safety requirements for `slice::from_raw_parts`","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":42847,"byte_end":42939,"line_start":163,"line_end":163,"column_start":5,"column_end":97}},{"value":"/ since the `Uninit` must be contained in a single allocation.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":42944,"byte_end":43008,"line_start":164,"line_end":164,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":335},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":43461,"byte_end":43475,"line_start":178,"line_end":178,"column_start":12,"column_end":26},"name":"invent_for_zst","qualname":"<Uninit>::invent_for_zst","value":"pub fn invent_for_zst() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Invent a new uninit allocation for a zero-sized type (ZST).","sig":null,"attributes":[{"value":"/ Invent a new uninit allocation for a zero-sized type (ZST).","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":43284,"byte_end":43347,"line_start":174,"line_end":174,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":43352,"byte_end":43355,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":43360,"byte_end":43372,"line_start":176,"line_end":176,"column_start":5,"column_end":17}},{"value":"/ This method panics when the type parameter is not a zero sized type.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":43377,"byte_end":43449,"line_start":177,"line_end":177,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":339},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":43814,"byte_end":43823,"line_start":189,"line_end":189,"column_start":19,"column_end":28},"name":"from_view","qualname":"<Uninit>::from_view","value":"pub unsafe fn from_view(UninitView) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an `uninit` from a view.","sig":null,"attributes":[{"value":"/ Create an `uninit` from a view.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":43640,"byte_end":43675,"line_start":185,"line_end":185,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":43680,"byte_end":43683,"line_start":186,"line_end":186,"column_start":5,"column_end":8}},{"value":"/ ## Safety","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":43688,"byte_end":43701,"line_start":187,"line_end":187,"column_start":5,"column_end":18}},{"value":"/ The caller must prove that the pointed-to memory is mutable and that it is unaliased.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":43706,"byte_end":43795,"line_start":188,"line_end":188,"column_start":5,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":340},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":44003,"byte_end":44020,"line_start":194,"line_end":194,"column_start":12,"column_end":29},"name":"from_maybe_uninit","qualname":"<Uninit>::from_maybe_uninit","value":"pub fn from_maybe_uninit(&'a mut mem::MaybeUninit<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an initializable pointer to the inner bytes of a `MaybeUninit`.\n","sig":null,"attributes":[{"value":"/ Create an initializable pointer to the inner bytes of a `MaybeUninit`.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":43917,"byte_end":43991,"line_start":193,"line_end":193,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":341},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":44568,"byte_end":44581,"line_start":208,"line_end":208,"column_start":12,"column_end":25},"name":"split_at_byte","qualname":"<Uninit>::split_at_byte","value":"pub fn split_at_byte(&mut Self, usize) -> Option<Uninit>","parent":null,"children":[],"decl_id":null,"docs":" Split the uninit slice at a byte boundary.","sig":null,"attributes":[{"value":"/ Split the uninit slice at a byte boundary.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":44419,"byte_end":44465,"line_start":205,"line_end":205,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":44470,"byte_end":44473,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ Return `Ok` if the location is in-bounds and `Err` if it is out of bounds.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":44478,"byte_end":44556,"line_start":207,"line_end":207,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":342},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":45186,"byte_end":45190,"line_start":222,"line_end":222,"column_start":12,"column_end":16},"name":"cast","qualname":"<Uninit>::cast","value":"pub fn cast<U>(Self) -> Result<Uninit, Self>","parent":null,"children":[],"decl_id":null,"docs":" Try to cast to an `Uninit` for another type.","sig":null,"attributes":[{"value":"/ Try to cast to an `Uninit` for another type.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":44732,"byte_end":44780,"line_start":213,"line_end":213,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":44785,"byte_end":44788,"line_start":214,"line_end":214,"column_start":5,"column_end":8}},{"value":"/ Return `Ok` if the current `Uninit` is suitably aligned and large enough to hold at least","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":44793,"byte_end":44886,"line_start":215,"line_end":215,"column_start":5,"column_end":98}},{"value":"/ one `U` and `Err` if it is not. Note that the successful result points to unused remaining","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":44891,"byte_end":44985,"line_start":216,"line_end":216,"column_start":5,"column_end":99}},{"value":"/ memory behind where the instance can be placed.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":44990,"byte_end":45041,"line_start":217,"line_end":217,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":45046,"byte_end":45049,"line_start":218,"line_end":218,"column_start":5,"column_end":8}},{"value":"/ Use [`split_to_fit`] to get rid of surplus memory at the end.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":45054,"byte_end":45119,"line_start":219,"line_end":219,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":45124,"byte_end":45127,"line_start":220,"line_end":220,"column_start":5,"column_end":8}},{"value":"/ [`split_to_fit`]: #method.split_to_fit","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":45132,"byte_end":45174,"line_start":221,"line_end":221,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":344},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":45699,"byte_end":45709,"line_start":233,"line_end":233,"column_start":12,"column_end":22},"name":"cast_slice","qualname":"<Uninit>::cast_slice","value":"pub fn cast_slice<U>(Self) -> Result<Uninit, Self>","parent":null,"children":[],"decl_id":null,"docs":" Try to cast to an `Uninit` for a slice type.","sig":null,"attributes":[{"value":"/ Try to cast to an `Uninit` for a slice type.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":45377,"byte_end":45425,"line_start":228,"line_end":228,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":45430,"byte_end":45433,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ Return `Ok` if the current `Uninit` is suitably aligned and large enough to hold at least","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":45438,"byte_end":45531,"line_start":230,"line_end":230,"column_start":5,"column_end":98}},{"value":"/ one `U` and `Err` if it is not. Note that the successful result points to unused remaining","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":45536,"byte_end":45630,"line_start":231,"line_end":231,"column_start":5,"column_end":99}},{"value":"/ memory behind where the instances can be placed.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":45635,"byte_end":45687,"line_start":232,"line_end":232,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":346},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":46042,"byte_end":46054,"line_start":242,"line_end":242,"column_start":12,"column_end":24},"name":"split_to_fit","qualname":"<Uninit>::split_to_fit","value":"pub fn split_to_fit(&mut Self) -> Uninit","parent":null,"children":[],"decl_id":null,"docs":" Split off the tail that is not required for holding an instance of `T`.","sig":null,"attributes":[{"value":"/ Split off the tail that is not required for holding an instance of `T`.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":45909,"byte_end":45984,"line_start":239,"line_end":239,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":45989,"byte_end":45992,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/ This operation is idempotent.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":45997,"byte_end":46030,"line_start":241,"line_end":241,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":347},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":46227,"byte_end":46231,"line_start":247,"line_end":247,"column_start":12,"column_end":16},"name":"init","qualname":"<Uninit>::init","value":"pub fn init(Self, T) -> &'a mut T","parent":null,"children":[],"decl_id":null,"docs":" Initialize the place and return a reference to the value.\n","sig":null,"attributes":[{"value":"/ Initialize the place and return a reference to the value.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":46154,"byte_end":46215,"line_start":246,"line_end":246,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":348},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":46827,"byte_end":46833,"line_start":262,"line_end":262,"column_start":18,"column_end":24},"name":"as_ptr","qualname":"<Uninit>::as_ptr","value":"pub const fn as_ptr(&Self) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":" Acquires the underlying *mut pointer.\n","sig":null,"attributes":[{"value":"/ Acquires the underlying *mut pointer.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":46768,"byte_end":46809,"line_start":261,"line_end":261,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":349},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":46971,"byte_end":46982,"line_start":267,"line_end":267,"column_start":18,"column_end":29},"name":"as_non_null","qualname":"<Uninit>::as_non_null","value":"pub const fn as_non_null(&Self) -> ptr::NonNull<T>","parent":null,"children":[],"decl_id":null,"docs":" Acquires the underlying pointer as a `NonNull`.\n","sig":null,"attributes":[{"value":"/ Acquires the underlying pointer as a `NonNull`.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":46902,"byte_end":46953,"line_start":266,"line_end":266,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":350},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":47295,"byte_end":47301,"line_start":275,"line_end":275,"column_start":19,"column_end":25},"name":"as_ref","qualname":"<Uninit>::as_ref","value":"pub unsafe fn as_ref(&Self) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Dereferences the content.","sig":null,"attributes":[{"value":"/ Dereferences the content.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":47051,"byte_end":47080,"line_start":271,"line_end":271,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":47085,"byte_end":47088,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ The resulting lifetime is bound to self so this behaves \"as if\" it were actually an","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":47093,"byte_end":47180,"line_start":273,"line_end":273,"column_start":5,"column_end":92}},{"value":"/ instance of T that is getting borrowed. If a longer lifetime is needed, use `into_ref`.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":47185,"byte_end":47276,"line_start":274,"line_end":274,"column_start":5,"column_end":96}}]},{"kind":"Method","id":{"krate":0,"index":351},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":47607,"byte_end":47613,"line_start":283,"line_end":283,"column_start":19,"column_end":25},"name":"as_mut","qualname":"<Uninit>::as_mut","value":"pub unsafe fn as_mut(&mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Mutably dereferences the content.","sig":null,"attributes":[{"value":"/ Mutably dereferences the content.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":47355,"byte_end":47392,"line_start":279,"line_end":279,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":47397,"byte_end":47400,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ The resulting lifetime is bound to self so this behaves \"as if\" it were actually an","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":47405,"byte_end":47492,"line_start":281,"line_end":281,"column_start":5,"column_end":92}},{"value":"/ instance of T that is getting borrowed. If a longer lifetime is needed, use `into_mut`.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":47497,"byte_end":47588,"line_start":282,"line_end":282,"column_start":5,"column_end":96}}]},{"kind":"Method","id":{"krate":0,"index":352},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":47741,"byte_end":47749,"line_start":288,"line_end":288,"column_start":19,"column_end":27},"name":"into_ref","qualname":"<Uninit>::into_ref","value":"pub unsafe fn into_ref(Self) -> &'a T","parent":null,"children":[],"decl_id":null,"docs":" Turn this into a reference to the content.\n","sig":null,"attributes":[{"value":"/ Turn this into a reference to the content.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":47676,"byte_end":47722,"line_start":287,"line_end":287,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":353},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":47875,"byte_end":47883,"line_start":293,"line_end":293,"column_start":19,"column_end":27},"name":"into_mut","qualname":"<Uninit>::into_mut","value":"pub unsafe fn into_mut(Self) -> &'a mut T","parent":null,"children":[],"decl_id":null,"docs":" Turn this into a mutable reference to the content.\n","sig":null,"attributes":[{"value":"/ Turn this into a mutable reference to the content.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":47802,"byte_end":47856,"line_start":292,"line_end":292,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":354},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":48499,"byte_end":48516,"line_start":306,"line_end":306,"column_start":12,"column_end":29},"name":"into_maybe_uninit","qualname":"<Uninit>::into_maybe_uninit","value":"pub fn into_maybe_uninit(Self) -> &'a mut mem::MaybeUninit<T>","parent":null,"children":[],"decl_id":null,"docs":" Turn this into a reference to standard `MaybeUninit`.","sig":null,"attributes":[{"value":"/ Turn this into a reference to standard `MaybeUninit`.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":47944,"byte_end":48001,"line_start":297,"line_end":297,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":48006,"byte_end":48009,"line_start":298,"line_end":298,"column_start":5,"column_end":8}},{"value":"/ This is mainly useful for interfacing with other consumers which expect standard library","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":48014,"byte_end":48106,"line_start":299,"line_end":299,"column_start":5,"column_end":97}},{"value":"/ types. It may also improve ergonomics for writing to the pointee partially initialized","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":48111,"byte_end":48201,"line_start":300,"line_end":300,"column_start":5,"column_end":95}},{"value":"/ instances of `T` that are obtained via other means.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":48206,"byte_end":48261,"line_start":301,"line_end":301,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":48266,"byte_end":48269,"line_start":302,"line_end":302,"column_start":5,"column_end":8}},{"value":"/ Note that the sequence `from_maybe_uninit`, `into_maybe_uninit` is a no-op. The converse is","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":48274,"byte_end":48369,"line_start":303,"line_end":303,"column_start":5,"column_end":100}},{"value":"/ however not the case, as it will potentially discard unused padding present in the original","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":48374,"byte_end":48469,"line_start":304,"line_end":304,"column_start":5,"column_end":100}},{"value":"/ `Uninit`.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":48474,"byte_end":48487,"line_start":305,"line_end":305,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":355},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":48953,"byte_end":48961,"line_start":315,"line_end":315,"column_start":12,"column_end":20},"name":"into_box","qualname":"<Uninit>::into_box","value":"pub fn into_box(Self, T) -> Box","parent":null,"children":[],"decl_id":null,"docs":" Utilize this `Uninit` allocation for a boxed value.","sig":null,"attributes":[{"value":"/ Utilize this `Uninit` allocation for a boxed value.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":48720,"byte_end":48775,"line_start":311,"line_end":311,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":48780,"byte_end":48783,"line_start":312,"line_end":312,"column_start":5,"column_end":8}},{"value":"/ Stores the value at the pointed-to location and utilizes the `Box` as a RAII-guard to","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":48788,"byte_end":48877,"line_start":313,"line_end":313,"column_start":5,"column_end":94}},{"value":"/ properly drop the value when the box itself is dropped.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":48882,"byte_end":48941,"line_start":314,"line_end":314,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":356},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":49442,"byte_end":49446,"line_start":327,"line_end":327,"column_start":19,"column_end":23},"name":"read","qualname":"<Uninit>::read","value":"pub unsafe fn read(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Read a value from the uninit place without moving it.","sig":null,"attributes":[{"value":"/ Read a value from the uninit place without moving it.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":49031,"byte_end":49088,"line_start":319,"line_end":319,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":49093,"byte_end":49096,"line_start":320,"line_end":320,"column_start":5,"column_end":8}},{"value":"/ The `Uninit` ensures that the inner pointer is correctly aligned, non-null, and points to a","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":49101,"byte_end":49196,"line_start":321,"line_end":321,"column_start":5,"column_end":100}},{"value":"/ large enough region for reading a `T`.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":49201,"byte_end":49243,"line_start":322,"line_end":322,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":49248,"byte_end":49251,"line_start":323,"line_end":323,"column_start":5,"column_end":8}},{"value":"/ ## Safety","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":49256,"byte_end":49269,"line_start":324,"line_end":324,"column_start":5,"column_end":18}},{"value":"/ Caller must ensure that the memory is initialized as a valid `T`. It must also avoid double","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":49274,"byte_end":49369,"line_start":325,"line_end":325,"column_start":5,"column_end":100}},{"value":"/ `Drop`. Basically, a new instance is created.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":49374,"byte_end":49423,"line_start":326,"line_end":326,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":360},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":49589,"byte_end":49594,"line_start":334,"line_end":334,"column_start":12,"column_end":17},"name":"empty","qualname":"<Uninit>::empty","value":"pub fn empty() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a pointer to an empty slice.\n","sig":null,"attributes":[{"value":"/ Creates a pointer to an empty slice.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":49537,"byte_end":49577,"line_start":333,"line_end":333,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":361},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":49913,"byte_end":49936,"line_start":344,"line_end":344,"column_start":12,"column_end":35},"name":"from_maybe_uninit_slice","qualname":"<Uninit>::from_maybe_uninit_slice","value":"pub fn from_maybe_uninit_slice(&'a mut [mem::MaybeUninit<T>]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an initializable pointer to the inner bytes of a `MaybeUninit`.\n","sig":null,"attributes":[{"value":"/ Create an initializable pointer to the inner bytes of a `MaybeUninit`.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":49827,"byte_end":49901,"line_start":343,"line_end":343,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":362},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":50521,"byte_end":50533,"line_start":359,"line_end":359,"column_start":18,"column_end":30},"name":"as_begin_ptr","qualname":"<Uninit>::as_begin_ptr","value":"pub const fn as_begin_ptr(&Self) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":" Get the pointer to the first element of the slice.","sig":null,"attributes":[{"value":"/ Get the pointer to the first element of the slice.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":50347,"byte_end":50401,"line_start":356,"line_end":356,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":50406,"byte_end":50409,"line_start":357,"line_end":357,"column_start":5,"column_end":8}},{"value":"/ If the slice would be empty then the pointer may be the past-the-end pointer as well.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":50414,"byte_end":50503,"line_start":358,"line_end":358,"column_start":5,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":363},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":50696,"byte_end":50704,"line_start":364,"line_end":364,"column_start":12,"column_end":20},"name":"capacity","qualname":"<Uninit>::capacity","value":"pub fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Calculate the theoretical capacity of a slice in the pointed-to allocation.\n","sig":null,"attributes":[{"value":"/ Calculate the theoretical capacity of a slice in the pointed-to allocation.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":50605,"byte_end":50684,"line_start":363,"line_end":363,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":364},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":50876,"byte_end":50884,"line_start":371,"line_end":371,"column_start":12,"column_end":20},"name":"split_at","qualname":"<Uninit>::split_at","value":"pub fn split_at(&mut Self, usize) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Split the slice at an index.","sig":null,"attributes":[{"value":"/ Split the slice at an index.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":50763,"byte_end":50795,"line_start":368,"line_end":368,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":50800,"byte_end":50803,"line_start":369,"line_end":369,"column_start":5,"column_end":8}},{"value":"/ This is the pointer equivalent of `slice::split_at`.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":50808,"byte_end":50864,"line_start":370,"line_end":370,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":365},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":51350,"byte_end":51363,"line_start":383,"line_end":383,"column_start":12,"column_end":25},"name":"shrink_to_fit","qualname":"<Uninit>::shrink_to_fit","value":"pub fn shrink_to_fit(&mut Self) -> Uninit","parent":null,"children":[],"decl_id":null,"docs":" Get the trailing bytes behind the slice.","sig":null,"attributes":[{"value":"/ Get the trailing bytes behind the slice.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":51018,"byte_end":51062,"line_start":376,"line_end":376,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":51067,"byte_end":51070,"line_start":377,"line_end":377,"column_start":5,"column_end":8}},{"value":"/ The underlying allocation need not be a multiple of the slice element size which may leave","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":51075,"byte_end":51169,"line_start":378,"line_end":378,"column_start":5,"column_end":99}},{"value":"/ unusable bytes. This splits these unusable bytes into an untyped `Uninit` which can be","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":51174,"byte_end":51264,"line_start":379,"line_end":379,"column_start":5,"column_end":95}},{"value":"/ reused arbitrarily.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":51269,"byte_end":51292,"line_start":380,"line_end":380,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":51297,"byte_end":51300,"line_start":381,"line_end":381,"column_start":5,"column_end":8}},{"value":"/ This operation is idempotent.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":51305,"byte_end":51338,"line_start":382,"line_end":382,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":366},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":51597,"byte_end":51608,"line_start":390,"line_end":390,"column_start":12,"column_end":23},"name":"split_first","qualname":"<Uninit>::split_first","value":"pub fn split_first(&mut Self) -> Option<Uninit>","parent":null,"children":[],"decl_id":null,"docs":" Split the first element from the slice.","sig":null,"attributes":[{"value":"/ Split the first element from the slice.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":51470,"byte_end":51513,"line_start":387,"line_end":387,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":51518,"byte_end":51521,"line_start":388,"line_end":388,"column_start":5,"column_end":8}},{"value":"/ This is the pointer equivalent of `slice::split_first`.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":51526,"byte_end":51585,"line_start":389,"line_end":389,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":367},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":52056,"byte_end":52066,"line_start":401,"line_end":401,"column_start":12,"column_end":22},"name":"split_last","qualname":"<Uninit>::split_last","value":"pub fn split_last(&mut Self) -> Option<Uninit>","parent":null,"children":[],"decl_id":null,"docs":" Split the last element from the slice.","sig":null,"attributes":[{"value":"/ Split the last element from the slice.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":51931,"byte_end":51973,"line_start":398,"line_end":398,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":51978,"byte_end":51981,"line_start":399,"line_end":399,"column_start":5,"column_end":8}},{"value":"/ This is the pointer equivalent of `slice::split_last`.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":51986,"byte_end":52044,"line_start":400,"line_end":400,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":368},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":52992,"byte_end":53015,"line_start":418,"line_end":418,"column_start":12,"column_end":35},"name":"into_maybe_uninit_slice","qualname":"<Uninit>::into_maybe_uninit_slice","value":"pub fn into_maybe_uninit_slice(Self) -> &'a mut [mem::MaybeUninit<T>]","parent":null,"children":[],"decl_id":null,"docs":" Turn this into a slice of standard `MaybeUninit`s.","sig":null,"attributes":[{"value":"/ Turn this into a slice of standard `MaybeUninit`s.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":52428,"byte_end":52482,"line_start":409,"line_end":409,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":52487,"byte_end":52490,"line_start":410,"line_end":410,"column_start":5,"column_end":8}},{"value":"/ This is mainly useful for interfacing with other consumers which expect standard library","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":52495,"byte_end":52587,"line_start":411,"line_end":411,"column_start":5,"column_end":97}},{"value":"/ types. It may also improve ergonomics for writing to the pointee partially initialized","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":52592,"byte_end":52682,"line_start":412,"line_end":412,"column_start":5,"column_end":95}},{"value":"/ instances of `T` that are obtained via other means.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":52687,"byte_end":52742,"line_start":413,"line_end":413,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":52747,"byte_end":52750,"line_start":414,"line_end":414,"column_start":5,"column_end":8}},{"value":"/ Note that the sequence `from_maybe_uninit_slice`, `into_maybe_uninit_slice` is a no-op. The","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":52755,"byte_end":52850,"line_start":415,"line_end":415,"column_start":5,"column_end":100}},{"value":"/ converse is however not the case, as it will potentially discard unused padding present in","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":52855,"byte_end":52949,"line_start":416,"line_end":416,"column_start":5,"column_end":99}},{"value":"/ the original `Uninit`.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":52954,"byte_end":52980,"line_start":417,"line_end":417,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":372},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":53495,"byte_end":53499,"line_start":432,"line_end":432,"column_start":12,"column_end":16},"name":"fits","qualname":"<Uninit>::fits","value":"pub fn fits(&Self, Layout) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if the view fits some layout.","sig":null,"attributes":[{"value":"/ Check if the view fits some layout.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":53359,"byte_end":53398,"line_start":429,"line_end":429,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":53403,"byte_end":53406,"line_start":430,"line_end":430,"column_start":5,"column_end":8}},{"value":"/ The `cast` to a type of the provided layout will work without error.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":53411,"byte_end":53483,"line_start":431,"line_end":431,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":373},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":53630,"byte_end":53639,"line_start":437,"line_end":437,"column_start":12,"column_end":21},"name":"as_memory","qualname":"<Uninit>::as_memory","value":"pub fn as_memory(Self) -> Uninit","parent":null,"children":[],"decl_id":null,"docs":" View the same uninit as untyped memory.\n","sig":null,"attributes":[{"value":"/ View the same uninit as untyped memory.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":53575,"byte_end":53618,"line_start":436,"line_end":436,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":375},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":54152,"byte_end":54158,"line_start":455,"line_end":455,"column_start":12,"column_end":18},"name":"borrow","qualname":"<Uninit>::borrow","value":"pub fn borrow(&Self) -> UninitView<, T>","parent":null,"children":[],"decl_id":null,"docs":" Borrow a view of the `Uninit` region.","sig":null,"attributes":[{"value":"/ Borrow a view of the `Uninit` region.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":53958,"byte_end":53999,"line_start":451,"line_end":451,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":54004,"byte_end":54007,"line_start":452,"line_end":452,"column_start":5,"column_end":8}},{"value":"/ This is the equivalent of `&*mut_ref as *const _` but never runs afoul of accidentally","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":54012,"byte_end":54102,"line_start":453,"line_end":453,"column_start":5,"column_end":95}},{"value":"/ creating an actual reference.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":54107,"byte_end":54140,"line_start":454,"line_end":454,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":376},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":54427,"byte_end":54437,"line_start":463,"line_end":463,"column_start":12,"column_end":22},"name":"borrow_mut","qualname":"<Uninit>::borrow_mut","value":"pub fn borrow_mut(&mut Self) -> Uninit<, T>","parent":null,"children":[],"decl_id":null,"docs":" Borrow the `Uninit` region for a shorter duration.","sig":null,"attributes":[{"value":"/ Borrow the `Uninit` region for a shorter duration.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":54218,"byte_end":54272,"line_start":459,"line_end":459,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":54277,"byte_end":54280,"line_start":460,"line_end":460,"column_start":5,"column_end":8}},{"value":"/ This is the equivalent of `&mut *mut_ref as *mut _` but never runs afoul of accidentally","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":54285,"byte_end":54377,"line_start":461,"line_end":461,"column_start":5,"column_end":97}},{"value":"/ creating an actual reference.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":54382,"byte_end":54415,"line_start":462,"line_end":462,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":377},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":54597,"byte_end":54601,"line_start":468,"line_end":468,"column_start":18,"column_end":22},"name":"size","qualname":"<Uninit>::size","value":"pub const fn size(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the byte size of the total allocation.\n","sig":null,"attributes":[{"value":"/ Get the byte size of the total allocation.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":54533,"byte_end":54579,"line_start":467,"line_end":467,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":379},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":55195,"byte_end":55206,"line_start":483,"line_end":483,"column_start":19,"column_end":30},"name":"from_memory","qualname":"<UninitView>::from_memory","value":"pub unsafe fn from_memory(ptr::NonNull<u8>, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a uninit view from raw memory.","sig":null,"attributes":[{"value":"/ Create a uninit view from raw memory.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":54683,"byte_end":54724,"line_start":473,"line_end":473,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":54729,"byte_end":54732,"line_start":474,"line_end":474,"column_start":5,"column_end":8}},{"value":"/ ## Safety","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":54737,"byte_end":54750,"line_start":475,"line_end":475,"column_start":5,"column_end":18}},{"value":"/ A valid allocation must exist at the pointer with length at least `len`.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":54755,"byte_end":54831,"line_start":476,"line_end":476,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":54836,"byte_end":54839,"line_start":477,"line_end":477,"column_start":5,"column_end":8}},{"value":"/ In particular, it is **UB** to create this from a reference to a variable of a type for","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":54844,"byte_end":54935,"line_start":478,"line_end":478,"column_start":5,"column_end":96}},{"value":"/ which a completely uninitialized content is not valid. The standard type for avoiding the","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":54940,"byte_end":55033,"line_start":479,"line_end":479,"column_start":5,"column_end":98}},{"value":"/ UB is `core::mem::MaybeUninit`.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":55038,"byte_end":55073,"line_start":480,"line_end":480,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":55078,"byte_end":55081,"line_start":481,"line_end":481,"column_start":5,"column_end":8}},{"value":"/ When in doubt, refactor code such that utilization of `from_maybe_uninit` is possible.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":55086,"byte_end":55176,"line_start":482,"line_end":482,"column_start":5,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":380},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":55603,"byte_end":55615,"line_start":497,"line_end":497,"column_start":12,"column_end":24},"name":"split_layout","qualname":"<UninitView>::split_layout","value":"pub fn split_layout(&mut Self, Layout) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Split so that the second part fits the layout.","sig":null,"attributes":[{"value":"/ Split so that the second part fits the layout.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":55395,"byte_end":55445,"line_start":492,"line_end":492,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":55450,"byte_end":55453,"line_start":493,"line_end":493,"column_start":5,"column_end":8}},{"value":"/ See [`Uninit::split_layout`] for more details.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":55458,"byte_end":55508,"line_start":494,"line_end":494,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":55513,"byte_end":55516,"line_start":495,"line_end":495,"column_start":5,"column_end":8}},{"value":"/ [`Uninit::split_layout`]: ./struct.Uninit.html#method.split_layout","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":55521,"byte_end":55591,"line_start":496,"line_end":496,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":386},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":56392,"byte_end":56402,"line_start":525,"line_end":525,"column_start":12,"column_end":22},"name":"split_cast","qualname":"<UninitView>::split_cast","value":"pub fn split_cast<U>(&mut Self) -> Option<UninitView>","parent":null,"children":[],"decl_id":null,"docs":" Split so that the tail is aligned and valid for a `U`.\n","sig":null,"attributes":[{"value":"/ Split so that the tail is aligned and valid for a `U`.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":56322,"byte_end":56380,"line_start":524,"line_end":524,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":388},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":56653,"byte_end":56664,"line_start":532,"line_end":532,"column_start":12,"column_end":23},"name":"split_slice","qualname":"<UninitView>::split_slice","value":"pub fn split_slice<U>(&mut Self) -> Option<UninitView>","parent":null,"children":[],"decl_id":null,"docs":" Split so that the tail is aligned for a slice `[U]`.\n","sig":null,"attributes":[{"value":"/ Split so that the tail is aligned for a slice `[U]`.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":56585,"byte_end":56641,"line_start":531,"line_end":531,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":392},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":57102,"byte_end":57116,"line_start":545,"line_end":545,"column_start":12,"column_end":26},"name":"invent_for_zst","qualname":"<UninitView>::invent_for_zst","value":"pub fn invent_for_zst() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Invent a new uninit allocation for a zero-sized type (ZST).","sig":null,"attributes":[{"value":"/ Invent a new uninit allocation for a zero-sized type (ZST).","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":56925,"byte_end":56988,"line_start":541,"line_end":541,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":56993,"byte_end":56996,"line_start":542,"line_end":542,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":57001,"byte_end":57013,"line_start":543,"line_end":543,"column_start":5,"column_end":17}},{"value":"/ This method panics when the type parameter is not a zero sized type.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":57018,"byte_end":57090,"line_start":544,"line_end":544,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":396},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":57680,"byte_end":57693,"line_start":560,"line_end":560,"column_start":12,"column_end":25},"name":"split_at_byte","qualname":"<UninitView>::split_at_byte","value":"pub fn split_at_byte(&mut Self, usize) -> Option<UninitView>","parent":null,"children":[],"decl_id":null,"docs":" Split the uninit view at a byte boundary.","sig":null,"attributes":[{"value":"/ Split the uninit view at a byte boundary.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":57474,"byte_end":57519,"line_start":555,"line_end":555,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":57524,"byte_end":57527,"line_start":556,"line_end":556,"column_start":5,"column_end":8}},{"value":"/ See [`Uninit::split_at_byte`] for more details.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":57532,"byte_end":57583,"line_start":557,"line_end":557,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":57588,"byte_end":57591,"line_start":558,"line_end":558,"column_start":5,"column_end":8}},{"value":"/ [`Uninit::split_at_byte`]: ./struct.Uninit.html#method.split_at_byte","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":57596,"byte_end":57668,"line_start":559,"line_end":559,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":397},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":58644,"byte_end":58661,"line_start":582,"line_end":582,"column_start":12,"column_end":29},"name":"from_maybe_uninit","qualname":"<UninitView>::from_maybe_uninit","value":"pub fn from_maybe_uninit(&'a mem::MaybeUninit<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an view to the inner bytes of a `MaybeUninit`.","sig":null,"attributes":[{"value":"/ Create an view to the inner bytes of a `MaybeUninit`.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":58357,"byte_end":58414,"line_start":577,"line_end":577,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":58419,"byte_end":58422,"line_start":578,"line_end":578,"column_start":5,"column_end":8}},{"value":"/ This is hardly useful on its own but since `UninitView` mirrors the traversal methods of","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":58427,"byte_end":58519,"line_start":579,"line_end":579,"column_start":5,"column_end":97}},{"value":"/ `Uninit` it can be used to get pointers to already initialized elements in an immutable","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":58524,"byte_end":58615,"line_start":580,"line_end":580,"column_start":5,"column_end":96}},{"value":"/ context.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":58620,"byte_end":58632,"line_start":581,"line_end":581,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":398},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":59127,"byte_end":59131,"line_start":594,"line_end":594,"column_start":12,"column_end":16},"name":"cast","qualname":"<UninitView>::cast","value":"pub fn cast<U>(Self) -> Result<UninitView, Self>","parent":null,"children":[],"decl_id":null,"docs":" Try to cast to an `UninitView` for another type.\n","sig":null,"attributes":[{"value":"/ Try to cast to an `UninitView` for another type.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":59063,"byte_end":59115,"line_start":593,"line_end":593,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":400},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":59501,"byte_end":59511,"line_start":608,"line_end":608,"column_start":12,"column_end":22},"name":"cast_slice","qualname":"<UninitView>::cast_slice","value":"pub fn cast_slice<U>(Self) -> Result<UninitView, Self>","parent":null,"children":[],"decl_id":null,"docs":" Try to cast to an `UninitView` for a slice type.\n","sig":null,"attributes":[{"value":"/ Try to cast to an `UninitView` for a slice type.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":59437,"byte_end":59489,"line_start":607,"line_end":607,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":402},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":59937,"byte_end":59949,"line_start":624,"line_end":624,"column_start":12,"column_end":24},"name":"split_to_fit","qualname":"<UninitView>::split_to_fit","value":"pub fn split_to_fit(&mut Self) -> UninitView","parent":null,"children":[],"decl_id":null,"docs":" Split off the tail that is not required for holding an instance of `T`.\n","sig":null,"attributes":[{"value":"/ Split off the tail that is not required for holding an instance of `T`.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":59850,"byte_end":59925,"line_start":623,"line_end":623,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":403},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":60118,"byte_end":60124,"line_start":629,"line_end":629,"column_start":18,"column_end":24},"name":"as_ptr","qualname":"<UninitView>::as_ptr","value":"pub const fn as_ptr(&Self) -> *const T","parent":null,"children":[],"decl_id":null,"docs":" Acquires the underlying `*const T` pointer.\n","sig":null,"attributes":[{"value":"/ Acquires the underlying `*const T` pointer.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":60053,"byte_end":60100,"line_start":628,"line_end":628,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":404},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":60258,"byte_end":60269,"line_start":634,"line_end":634,"column_start":12,"column_end":23},"name":"as_non_null","qualname":"<UninitView>::as_non_null","value":"pub fn as_non_null(&Self) -> ptr::NonNull<T>","parent":null,"children":[],"decl_id":null,"docs":" Acquires the underlying pointer as a `NonNull`.\n","sig":null,"attributes":[{"value":"/ Acquires the underlying pointer as a `NonNull`.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":60195,"byte_end":60246,"line_start":633,"line_end":633,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":405},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":60681,"byte_end":60687,"line_start":645,"line_end":645,"column_start":19,"column_end":25},"name":"as_ref","qualname":"<UninitView>::as_ref","value":"pub unsafe fn as_ref(&Self) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Dereferences the content.","sig":null,"attributes":[{"value":"/ Dereferences the content.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":60333,"byte_end":60362,"line_start":638,"line_end":638,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":60367,"byte_end":60370,"line_start":639,"line_end":639,"column_start":5,"column_end":8}},{"value":"/ The resulting lifetime is bound to self so this behaves \"as if\" it were actually an","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":60375,"byte_end":60462,"line_start":640,"line_end":640,"column_start":5,"column_end":92}},{"value":"/ instance of T that is getting borrowed. If a longer lifetime is needed, use `into_ref`.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":60467,"byte_end":60558,"line_start":641,"line_end":641,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":60563,"byte_end":60566,"line_start":642,"line_end":642,"column_start":5,"column_end":8}},{"value":"/ ## Safety","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":60571,"byte_end":60584,"line_start":643,"line_end":643,"column_start":5,"column_end":18}},{"value":"/ The caller must ensure that the content has already been initialized.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":60589,"byte_end":60662,"line_start":644,"line_end":644,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":406},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":60907,"byte_end":60915,"line_start":653,"line_end":653,"column_start":19,"column_end":27},"name":"into_ref","qualname":"<UninitView>::into_ref","value":"pub unsafe fn into_ref(Self) -> &'a T","parent":null,"children":[],"decl_id":null,"docs":" Turn this into a reference to the content.","sig":null,"attributes":[{"value":"/ Turn this into a reference to the content.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":60738,"byte_end":60784,"line_start":649,"line_end":649,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":60789,"byte_end":60792,"line_start":650,"line_end":650,"column_start":5,"column_end":8}},{"value":"/ ## Safety","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":60797,"byte_end":60810,"line_start":651,"line_end":651,"column_start":5,"column_end":18}},{"value":"/ The caller must ensure that the content has already been initialized.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":60815,"byte_end":60888,"line_start":652,"line_end":652,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":407},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":61406,"byte_end":61423,"line_start":665,"line_end":665,"column_start":12,"column_end":29},"name":"into_maybe_uninit","qualname":"<UninitView>::into_maybe_uninit","value":"pub fn into_maybe_uninit(Self) -> &'a mem::MaybeUninit<T>","parent":null,"children":[],"decl_id":null,"docs":" Turn this into a reference to standard `MaybeUninit`.","sig":null,"attributes":[{"value":"/ Turn this into a reference to standard `MaybeUninit`.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":60968,"byte_end":61025,"line_start":657,"line_end":657,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":61030,"byte_end":61033,"line_start":658,"line_end":658,"column_start":5,"column_end":8}},{"value":"/ This is mainly useful for interfacing with other consumers which expect standard library","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":61038,"byte_end":61130,"line_start":659,"line_end":659,"column_start":5,"column_end":97}},{"value":"/ types and to mirror `Uninit`.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":61135,"byte_end":61168,"line_start":660,"line_end":660,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":61173,"byte_end":61176,"line_start":661,"line_end":661,"column_start":5,"column_end":8}},{"value":"/ Note that the sequence `from_maybe_uninit`, `into_maybe_uninit` is a no-op. The converse is","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":61181,"byte_end":61276,"line_start":662,"line_end":662,"column_start":5,"column_end":100}},{"value":"/ however not the case, as it will potentially discard unused padding present in the original","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":61281,"byte_end":61376,"line_start":663,"line_end":663,"column_start":5,"column_end":100}},{"value":"/ `Uninit`.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":61381,"byte_end":61394,"line_start":664,"line_end":664,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":411},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":61847,"byte_end":61852,"line_start":676,"line_end":676,"column_start":12,"column_end":17},"name":"empty","qualname":"<UninitView>::empty","value":"pub fn empty() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a pointer to an empty slice.","sig":null,"attributes":[{"value":"/ Creates a pointer to an empty slice.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":61658,"byte_end":61698,"line_start":672,"line_end":672,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":61703,"byte_end":61706,"line_start":673,"line_end":673,"column_start":5,"column_end":8}},{"value":"/ Note that it will **not** be a mutable empty slice which means that it would be **UB** to","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":61711,"byte_end":61804,"line_start":674,"line_end":674,"column_start":5,"column_end":98}},{"value":"/ use it as an `Uninit`.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":61809,"byte_end":61835,"line_start":675,"line_end":675,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":412},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":62150,"byte_end":62173,"line_start":686,"line_end":686,"column_start":12,"column_end":35},"name":"from_maybe_uninit_slice","qualname":"<UninitView>::from_maybe_uninit_slice","value":"pub fn from_maybe_uninit_slice(&'a [mem::MaybeUninit<T>]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an view on potentially uninitialized memory bytes of a slice of `MaybeUninit`.\n","sig":null,"attributes":[{"value":"/ Create an view on potentially uninitialized memory bytes of a slice of `MaybeUninit`.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":62049,"byte_end":62138,"line_start":685,"line_end":685,"column_start":5,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":413},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":62568,"byte_end":62580,"line_start":697,"line_end":697,"column_start":12,"column_end":24},"name":"as_begin_ptr","qualname":"<UninitView>::as_begin_ptr","value":"pub fn as_begin_ptr(&Self) -> *const T","parent":null,"children":[],"decl_id":null,"docs":" Get the pointer to the first element of the slice.\n","sig":null,"attributes":[{"value":"/ Get the pointer to the first element of the slice.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":62502,"byte_end":62556,"line_start":696,"line_end":696,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":414},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":62742,"byte_end":62750,"line_start":702,"line_end":702,"column_start":12,"column_end":20},"name":"capacity","qualname":"<UninitView>::capacity","value":"pub fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Calculate the theoretical capacity of a slice in the pointed-to allocation.\n","sig":null,"attributes":[{"value":"/ Calculate the theoretical capacity of a slice in the pointed-to allocation.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":62651,"byte_end":62730,"line_start":701,"line_end":701,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":415},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":62936,"byte_end":62944,"line_start":709,"line_end":709,"column_start":12,"column_end":20},"name":"split_at","qualname":"<UninitView>::split_at","value":"pub fn split_at(&mut Self, usize) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Split the slice at an index.\n","sig":null,"attributes":[{"value":"/ Split the slice at an index.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":62892,"byte_end":62924,"line_start":708,"line_end":708,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":416},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":64227,"byte_end":64240,"line_start":738,"line_end":738,"column_start":12,"column_end":25},"name":"shrink_to_fit","qualname":"<UninitView>::shrink_to_fit","value":"pub fn shrink_to_fit(&mut Self) -> UninitView","parent":null,"children":[],"decl_id":null,"docs":" Get the trailing bytes behind the slice.","sig":null,"attributes":[{"value":"/ Get the trailing bytes behind the slice.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":63895,"byte_end":63939,"line_start":731,"line_end":731,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":63944,"byte_end":63947,"line_start":732,"line_end":732,"column_start":5,"column_end":8}},{"value":"/ The underlying allocation need not be a multiple of the slice element size which may leave","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":63952,"byte_end":64046,"line_start":733,"line_end":733,"column_start":5,"column_end":99}},{"value":"/ unusable bytes. This splits these unusable bytes into an untyped `Uninit` which can be","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":64051,"byte_end":64141,"line_start":734,"line_end":734,"column_start":5,"column_end":95}},{"value":"/ reused arbitrarily.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":64146,"byte_end":64169,"line_start":735,"line_end":735,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":64174,"byte_end":64177,"line_start":736,"line_end":736,"column_start":5,"column_end":8}},{"value":"/ This operation is idempotent.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":64182,"byte_end":64215,"line_start":737,"line_end":737,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":417},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":64410,"byte_end":64421,"line_start":743,"line_end":743,"column_start":12,"column_end":23},"name":"split_first","qualname":"<UninitView>::split_first","value":"pub fn split_first(&mut Self) -> Option<UninitView>","parent":null,"children":[],"decl_id":null,"docs":" Split the first element from the slice.\n","sig":null,"attributes":[{"value":"/ Split the first element from the slice.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":64355,"byte_end":64398,"line_start":742,"line_end":742,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":418},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":64806,"byte_end":64816,"line_start":752,"line_end":752,"column_start":12,"column_end":22},"name":"split_last","qualname":"<UninitView>::split_last","value":"pub fn split_last(&mut Self) -> Option<UninitView>","parent":null,"children":[],"decl_id":null,"docs":" Split the last element from the slice.\n","sig":null,"attributes":[{"value":"/ Split the last element from the slice.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":64752,"byte_end":64794,"line_start":751,"line_end":751,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":419},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":65633,"byte_end":65656,"line_start":768,"line_end":768,"column_start":12,"column_end":35},"name":"into_maybe_uninit_slice","qualname":"<UninitView>::into_maybe_uninit_slice","value":"pub fn into_maybe_uninit_slice(Self) -> &'a [mem::MaybeUninit<T>]","parent":null,"children":[],"decl_id":null,"docs":" Turn this into a slice of standard `MaybeUninit`s.","sig":null,"attributes":[{"value":"/ Turn this into a slice of standard `MaybeUninit`s.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":65186,"byte_end":65240,"line_start":760,"line_end":760,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":65245,"byte_end":65248,"line_start":761,"line_end":761,"column_start":5,"column_end":8}},{"value":"/ This is mainly useful for interfacing with other consumers which expect standard library","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":65253,"byte_end":65345,"line_start":762,"line_end":762,"column_start":5,"column_end":97}},{"value":"/ types and to mirror `Uninit`.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":65350,"byte_end":65383,"line_start":763,"line_end":763,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":65388,"byte_end":65391,"line_start":764,"line_end":764,"column_start":5,"column_end":8}},{"value":"/ Note that the sequence `from_maybe_uninit_slice`, `into_maybe_uninit_slice` is a no-op. The","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":65396,"byte_end":65491,"line_start":765,"line_end":765,"column_start":5,"column_end":100}},{"value":"/ converse is however not the case, as it will potentially discard unused padding present in","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":65496,"byte_end":65590,"line_start":766,"line_end":766,"column_start":5,"column_end":99}},{"value":"/ the original `Uninit`.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":65595,"byte_end":65621,"line_start":767,"line_end":767,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":423},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":66134,"byte_end":66138,"line_start":782,"line_end":782,"column_start":12,"column_end":16},"name":"fits","qualname":"<UninitView>::fits","value":"pub fn fits(&Self, Layout) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if the view fits some layout.","sig":null,"attributes":[{"value":"/ Check if the view fits some layout.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":65998,"byte_end":66037,"line_start":779,"line_end":779,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":66042,"byte_end":66045,"line_start":780,"line_end":780,"column_start":5,"column_end":8}},{"value":"/ The `cast` to a type of the provided layout will work without error.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":66050,"byte_end":66122,"line_start":781,"line_end":781,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":424},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":66343,"byte_end":66349,"line_start":788,"line_end":788,"column_start":12,"column_end":18},"name":"borrow","qualname":"<UninitView>::borrow","value":"pub fn borrow(&Self) -> UninitView<, T>","parent":null,"children":[],"decl_id":null,"docs":" Borrow another view of the `Uninit` region.\n","sig":null,"attributes":[{"value":"/ Borrow another view of the `Uninit` region.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":66284,"byte_end":66331,"line_start":787,"line_end":787,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":425},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":66469,"byte_end":66473,"line_start":793,"line_end":793,"column_start":18,"column_end":22},"name":"size","qualname":"<UninitView>::size","value":"pub const fn size(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the byte size of the total allocation.\n","sig":null,"attributes":[{"value":"/ Get the byte size of the total allocation.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":66405,"byte_end":66451,"line_start":792,"line_end":792,"column_start":5,"column_end":51}}]},{"kind":"Mod","id":{"krate":0,"index":463},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"fixed_vec","qualname":"::fixed_vec","value":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","parent":null,"children":[{"krate":0,"index":464},{"krate":0,"index":465},{"krate":0,"index":468},{"krate":0,"index":471},{"krate":0,"index":474},{"krate":0,"index":477},{"krate":0,"index":480},{"krate":0,"index":483},{"krate":0,"index":486},{"krate":0,"index":489},{"krate":0,"index":494},{"krate":0,"index":503},{"krate":0,"index":529},{"krate":0,"index":536},{"krate":0,"index":542},{"krate":0,"index":546},{"krate":0,"index":549},{"krate":0,"index":552},{"krate":0,"index":557},{"krate":0,"index":561},{"krate":0,"index":567},{"krate":0,"index":576},{"krate":0,"index":579},{"krate":0,"index":581},{"krate":0,"index":585},{"krate":0,"index":588},{"krate":0,"index":591},{"krate":0,"index":594},{"krate":0,"index":597},{"krate":0,"index":602},{"krate":0,"index":605},{"krate":0,"index":608},{"krate":0,"index":610},{"krate":0,"index":613}],"decl_id":null,"docs":" Contains the `FixedVec` implementation.","sig":null,"attributes":[{"value":"/ Contains the `FixedVec` implementation.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":68569,"byte_end":68612,"line_start":1,"line_end":1,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":68613,"byte_end":68616,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ [See `FixedVec` for the main information][`FixedVec`].","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":68617,"byte_end":68675,"line_start":3,"line_end":3,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":68676,"byte_end":68679,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ [`FixedVec`]: struct.FixedVec.html","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":68680,"byte_end":68718,"line_start":5,"line_end":5,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":489},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":71637,"byte_end":71645,"line_start":92,"line_end":92,"column_start":12,"column_end":20},"name":"FixedVec","qualname":"::fixed_vec::FixedVec","value":"FixedVec {  }","parent":null,"children":[{"krate":0,"index":492},{"krate":0,"index":493}],"decl_id":null,"docs":" A `Vec`-like structure that does not manage its allocation.","sig":null,"attributes":[{"value":"/ A `Vec`-like structure that does not manage its allocation.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":68801,"byte_end":68864,"line_start":9,"line_end":9,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":68865,"byte_end":68868,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ This vector type will never (re-)allocate but it can also not free underused memory. As opposed","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":68869,"byte_end":68968,"line_start":11,"line_end":11,"column_start":1,"column_end":100}},{"value":"/ to other similar crates, it does require and additional bounds on its type parameter as it","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":68969,"byte_end":69063,"line_start":12,"line_end":12,"column_start":1,"column_end":95}},{"value":"/ truly manages uninitialized memory to store instances.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":69064,"byte_end":69122,"line_start":13,"line_end":13,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":69123,"byte_end":69126,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ # Basic Usage","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":69127,"byte_end":69144,"line_start":15,"line_end":15,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":69145,"byte_end":69148,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ It is easy to use a local array or slice of `MaybeUninit` for the storage of a `FixedVec`. Note","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":69149,"byte_end":69248,"line_start":17,"line_end":17,"column_start":1,"column_end":100}},{"value":"/ that, similar to the allocated standard `Vec`, the underlying memory not being stored inline","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":69249,"byte_end":69345,"line_start":18,"line_end":18,"column_start":1,"column_end":97}},{"value":"/ makes moves and splitting much cheaper.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":69346,"byte_end":69389,"line_start":19,"line_end":19,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":69390,"byte_end":69393,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":69394,"byte_end":69401,"line_start":21,"line_end":21,"column_start":1,"column_end":8}},{"value":"/ use core::mem::MaybeUninit;","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":69402,"byte_end":69433,"line_start":22,"line_end":22,"column_start":1,"column_end":32}},{"value":"/ use without_alloc::FixedVec;","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":69434,"byte_end":69466,"line_start":23,"line_end":23,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":69467,"byte_end":69470,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ let mut memory: [MaybeUninit<usize>; 15] = [MaybeUninit::uninit(); 15];","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":69471,"byte_end":69546,"line_start":25,"line_end":25,"column_start":1,"column_end":76}},{"value":"/ let mut stack = FixedVec::new((&mut memory[..]).into());","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":69547,"byte_end":69607,"line_start":26,"line_end":26,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":69608,"byte_end":69611,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ stack.push(1);","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":69612,"byte_end":69630,"line_start":28,"line_end":28,"column_start":1,"column_end":19}},{"value":"/ stack.push(2);","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":69631,"byte_end":69649,"line_start":29,"line_end":29,"column_start":1,"column_end":19}},{"value":"/ stack.push(3);","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":69650,"byte_end":69668,"line_start":30,"line_end":30,"column_start":1,"column_end":19}},{"value":"/ while let Some(top) = stack.pop() {","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":69669,"byte_end":69708,"line_start":31,"line_end":31,"column_start":1,"column_end":40}},{"value":"/     // Prints 3, 2, 1","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":69709,"byte_end":69734,"line_start":32,"line_end":32,"column_start":1,"column_end":26}},{"value":"/     println!(\"{}\", top);","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":69735,"byte_end":69763,"line_start":33,"line_end":33,"column_start":1,"column_end":29}},{"value":"/ }","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":69764,"byte_end":69769,"line_start":34,"line_end":34,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":69770,"byte_end":69777,"line_start":35,"line_end":35,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":69778,"byte_end":69781,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ ## With `Bump`","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":69782,"byte_end":69800,"line_start":37,"line_end":37,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":69801,"byte_end":69804,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ One focus of the library is composability. It should not be surprising that `FixedVec`","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":69805,"byte_end":69895,"line_start":39,"line_end":39,"column_start":1,"column_end":91}},{"value":"/ interacts with the [`LocalAlloc`] allocators, which implements a specialized interface","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":69896,"byte_end":69986,"line_start":40,"line_end":40,"column_start":1,"column_end":91}},{"value":"/ providing the [`Uninit`] type instead of a raw `*const u8`, through an extension trait. Hence,","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":69987,"byte_end":70085,"line_start":41,"line_end":41,"column_start":1,"column_end":99}},{"value":"/ the `FixedVec` can use this instead of its own local stack variables.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":70086,"byte_end":70159,"line_start":42,"line_end":42,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":70160,"byte_end":70163,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":70164,"byte_end":70171,"line_start":44,"line_end":44,"column_start":1,"column_end":8}},{"value":"/ use static_alloc::Bump;","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":70172,"byte_end":70199,"line_start":45,"line_end":45,"column_start":1,"column_end":28}},{"value":"/ use without_alloc::{FixedVec, alloc::LocalAllocLeakExt};","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":70200,"byte_end":70260,"line_start":46,"line_end":46,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":70261,"byte_end":70264,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ let alloc: Bump<[u8; 1 << 12]> = Bump::uninit();","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":70265,"byte_end":70317,"line_start":48,"line_end":48,"column_start":1,"column_end":53}},{"value":"/ let some_usize = alloc.leak(0_usize).unwrap();","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":70318,"byte_end":70368,"line_start":49,"line_end":49,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":70369,"byte_end":70372,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ // Allocate a vector with capacity `1` from the slab.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":70373,"byte_end":70430,"line_start":51,"line_end":51,"column_start":1,"column_end":58}},{"value":"/ let mut vec = alloc.fixed_vec(1).unwrap();","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":70431,"byte_end":70477,"line_start":52,"line_end":52,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":70478,"byte_end":70481,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ // Push the reference to the other allocation.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":70482,"byte_end":70532,"line_start":54,"line_end":54,"column_start":1,"column_end":51}},{"value":"/ vec.push(&mut *some_usize);","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":70533,"byte_end":70564,"line_start":55,"line_end":55,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":70565,"byte_end":70568,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ // … do something else","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":70569,"byte_end":70597,"line_start":57,"line_end":57,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":70598,"byte_end":70601,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ // Ensure lifetimes work out.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":70602,"byte_end":70635,"line_start":59,"line_end":59,"column_start":1,"column_end":34}},{"value":"/ drop(vec);","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":70636,"byte_end":70650,"line_start":60,"line_end":60,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":70651,"byte_end":70654,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ // Hooray, now once again unborrowed.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":70655,"byte_end":70696,"line_start":62,"line_end":62,"column_start":1,"column_end":42}},{"value":"/ *some_usize = 0;","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":70697,"byte_end":70717,"line_start":63,"line_end":63,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":70718,"byte_end":70725,"line_start":64,"line_end":64,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":70726,"byte_end":70729,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ ## The [`from_unaligned`] constructor","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":70730,"byte_end":70771,"line_start":66,"line_end":66,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":70772,"byte_end":70775,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ It is possible to place a `FixedVec` into an uninitialized memory, not only the `Uninit<[T]>`","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":70776,"byte_end":70873,"line_start":68,"line_end":68,"column_start":1,"column_end":98}},{"value":"/ that the [`new`] constructor requires. This will align the underlying memory suitably and","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":70874,"byte_end":70967,"line_start":69,"line_end":69,"column_start":1,"column_end":94}},{"value":"/ substitute a dangling empty slice if that is not possible.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":70968,"byte_end":71030,"line_start":70,"line_end":70,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":71031,"byte_end":71034,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":71035,"byte_end":71042,"line_start":72,"line_end":72,"column_start":1,"column_end":8}},{"value":"/ use core::mem::MaybeUninit;","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":71043,"byte_end":71074,"line_start":73,"line_end":73,"column_start":1,"column_end":32}},{"value":"/ use without_alloc::{FixedVec, Uninit};","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":71075,"byte_end":71117,"line_start":74,"line_end":74,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":71118,"byte_end":71121,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ struct MyStruct {","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":71122,"byte_end":71143,"line_start":76,"line_end":76,"column_start":1,"column_end":22}},{"value":"/     // ..","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":71144,"byte_end":71157,"line_start":77,"line_end":77,"column_start":1,"column_end":14}},{"value":"/ # _private: [usize; 1],","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":71158,"byte_end":71185,"line_start":78,"line_end":78,"column_start":1,"column_end":28}},{"value":"/ }","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":71186,"byte_end":71191,"line_start":79,"line_end":79,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":71192,"byte_end":71195,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ let mut memory: MaybeUninit<[u8; 1024]> = MaybeUninit::uninit();","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":71196,"byte_end":71264,"line_start":81,"line_end":81,"column_start":1,"column_end":69}},{"value":"/ let uninit = Uninit::from(&mut memory);","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":71265,"byte_end":71308,"line_start":82,"line_end":82,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":71309,"byte_end":71312,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ // NO guarantees about space lost from required additional aligning.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":71313,"byte_end":71385,"line_start":84,"line_end":84,"column_start":1,"column_end":73}},{"value":"/ let mut vec: FixedVec<MyStruct> = FixedVec::from_unaligned(uninit);","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":71386,"byte_end":71457,"line_start":85,"line_end":85,"column_start":1,"column_end":72}},{"value":"/ ```","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":71458,"byte_end":71465,"line_start":86,"line_end":86,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":71466,"byte_end":71469,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ [`Bump`]: ../slab/struct.Bump.html","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":71470,"byte_end":71508,"line_start":88,"line_end":88,"column_start":1,"column_end":39}},{"value":"/ [`Uninit`]: ../uninit/struct.Uninit.html","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":71509,"byte_end":71553,"line_start":89,"line_end":89,"column_start":1,"column_end":45}},{"value":"/ [`new`]: #method.new","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":71554,"byte_end":71578,"line_start":90,"line_end":90,"column_start":1,"column_end":25}},{"value":"/ [`from_unaligned`]: #method.from_unaligned","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":71579,"byte_end":71625,"line_start":91,"line_end":91,"column_start":1,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":494},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":71949,"byte_end":71954,"line_start":103,"line_end":103,"column_start":12,"column_end":17},"name":"Drain","qualname":"::fixed_vec::Drain","value":"Drain {  }","parent":null,"children":[{"krate":0,"index":497},{"krate":0,"index":498},{"krate":0,"index":499},{"krate":0,"index":500},{"krate":0,"index":501},{"krate":0,"index":502}],"decl_id":null,"docs":" An iterator removing a range of elements from a `FixedVec`.","sig":null,"attributes":[{"value":"/ An iterator removing a range of elements from a `FixedVec`.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":71706,"byte_end":71769,"line_start":97,"line_end":97,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":71770,"byte_end":71773,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ See [`FixedVec::drain`] for more information.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":71774,"byte_end":71823,"line_start":99,"line_end":99,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":71824,"byte_end":71827,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"/ [`FixedVec::drain`]: struct.FixedVec.html#method.drain","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":71828,"byte_end":71886,"line_start":101,"line_end":101,"column_start":1,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":505},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":73650,"byte_end":73658,"line_start":146,"line_end":146,"column_start":12,"column_end":20},"name":"truncate","qualname":"<FixedVec>::truncate","value":"pub fn truncate(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Shorten the vector to a maximum length.","sig":null,"attributes":[{"value":"/ Shorten the vector to a maximum length.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":72545,"byte_end":72588,"line_start":119,"line_end":119,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":72593,"byte_end":72596,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ If the length is not larger than `len` this has no effect.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":72601,"byte_end":72663,"line_start":121,"line_end":121,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":72668,"byte_end":72671,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ The tail of the vector is dropped starting from the last element. This order is opposite to","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":72676,"byte_end":72771,"line_start":123,"line_end":123,"column_start":5,"column_end":100}},{"value":"/ `.drain(len..).for_each(drop)`. `truncate` provides the extra guarantee that a `panic`","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":72776,"byte_end":72866,"line_start":124,"line_end":124,"column_start":5,"column_end":95}},{"value":"/ during `Drop` of one element effectively stops the truncation at that point, instead of","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":72871,"byte_end":72962,"line_start":125,"line_end":125,"column_start":5,"column_end":96}},{"value":"/ leaking unspecified other content of the vector. This means that other elements are still","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":72967,"byte_end":73060,"line_start":126,"line_end":126,"column_start":5,"column_end":98}},{"value":"/ dropped when unwinding eventually drops the `FixedVec` itself.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":73065,"byte_end":73131,"line_start":127,"line_end":127,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":73136,"byte_end":73139,"line_start":128,"line_end":128,"column_start":5,"column_end":8}},{"value":"/ ## Example","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":73144,"byte_end":73158,"line_start":129,"line_end":129,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":73163,"byte_end":73166,"line_start":130,"line_end":130,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":73171,"byte_end":73178,"line_start":131,"line_end":131,"column_start":5,"column_end":12}},{"value":"/ # use core::mem::MaybeUninit;","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":73183,"byte_end":73216,"line_start":132,"line_end":132,"column_start":5,"column_end":38}},{"value":"/ # use without_alloc::{FixedVec, Uninit};","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":73221,"byte_end":73265,"line_start":133,"line_end":133,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":73270,"byte_end":73273,"line_start":134,"line_end":134,"column_start":5,"column_end":8}},{"value":"/ let mut memory: [MaybeUninit<usize>; 4] = [MaybeUninit::uninit(); 4];","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":73278,"byte_end":73351,"line_start":135,"line_end":135,"column_start":5,"column_end":78}},{"value":"/ let mut vec = FixedVec::new(Uninit::from(&mut memory[..]));","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":73356,"byte_end":73419,"line_start":136,"line_end":136,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":73424,"byte_end":73427,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/ vec.push(0usize);","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":73432,"byte_end":73453,"line_start":138,"line_end":138,"column_start":5,"column_end":26}},{"value":"/ vec.push(1usize);","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":73458,"byte_end":73479,"line_start":139,"line_end":139,"column_start":5,"column_end":26}},{"value":"/ vec.push(2usize);","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":73484,"byte_end":73505,"line_start":140,"line_end":140,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":73510,"byte_end":73513,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(vec.as_slice(), [0, 1, 2]);","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":73518,"byte_end":73560,"line_start":142,"line_end":142,"column_start":5,"column_end":47}},{"value":"/ vec.truncate(1);","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":73565,"byte_end":73585,"line_start":143,"line_end":143,"column_start":5,"column_end":25}},{"value":"/ assert_eq!(vec.as_slice(), [0]);","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":73590,"byte_end":73626,"line_start":144,"line_end":144,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":73631,"byte_end":73638,"line_start":145,"line_end":145,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":512},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":74385,"byte_end":74393,"line_start":173,"line_end":173,"column_start":12,"column_end":20},"name":"as_slice","qualname":"<FixedVec>::as_slice","value":"pub fn as_slice(&Self) -> &[T]","parent":null,"children":[],"decl_id":null,"docs":" Extracts a slice containing the entire vector.\n","sig":null,"attributes":[{"value":"/ Extracts a slice containing the entire vector.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":74323,"byte_end":74373,"line_start":172,"line_end":172,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":513},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":74665,"byte_end":74677,"line_start":181,"line_end":181,"column_start":12,"column_end":24},"name":"as_mut_slice","qualname":"<FixedVec>::as_mut_slice","value":"pub fn as_mut_slice(&mut Self) -> &mut [T]","parent":null,"children":[],"decl_id":null,"docs":" Extracts the mutable slice containing the entire vector.\n","sig":null,"attributes":[{"value":"/ Extracts the mutable slice containing the entire vector.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":74593,"byte_end":74653,"line_start":180,"line_end":180,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":514},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":75139,"byte_end":75144,"line_start":195,"line_end":195,"column_start":12,"column_end":17},"name":"clear","qualname":"<FixedVec>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Remove all elements.","sig":null,"attributes":[{"value":"/ Remove all elements.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":74994,"byte_end":75018,"line_start":190,"line_end":190,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":75023,"byte_end":75026,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ This is an alias for [`truncate(0)`][truncate].","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":75031,"byte_end":75082,"line_start":192,"line_end":192,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":75087,"byte_end":75090,"line_start":193,"line_end":193,"column_start":5,"column_end":8}},{"value":"/ [truncate]: #method.truncate","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":75095,"byte_end":75127,"line_start":194,"line_end":194,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":515},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":75255,"byte_end":75258,"line_start":200,"line_end":200,"column_start":12,"column_end":15},"name":"len","qualname":"<FixedVec>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements in the vector.\n","sig":null,"attributes":[{"value":"/ Returns the number of elements in the vector.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":75194,"byte_end":75243,"line_start":199,"line_end":199,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":516},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":75533,"byte_end":75540,"line_start":209,"line_end":209,"column_start":19,"column_end":26},"name":"set_len","qualname":"<FixedVec>::set_len","value":"pub unsafe fn set_len(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Set the raw length.","sig":null,"attributes":[{"value":"/ Set the raw length.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":75308,"byte_end":75331,"line_start":204,"line_end":204,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":75336,"byte_end":75339,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ ## Safety","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":75344,"byte_end":75357,"line_start":206,"line_end":206,"column_start":5,"column_end":18}},{"value":"/ * `new_len` must be smaller or equal `self.capacity()`","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":75362,"byte_end":75420,"line_start":207,"line_end":207,"column_start":5,"column_end":63}},{"value":"/ * The caller must ensure that all newly referenced elements are properly initialized.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":75425,"byte_end":75514,"line_start":208,"line_end":208,"column_start":5,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":517},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":75679,"byte_end":75687,"line_start":214,"line_end":214,"column_start":12,"column_end":20},"name":"capacity","qualname":"<FixedVec>::capacity","value":"pub fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements the vector can hold.\n","sig":null,"attributes":[{"value":"/ Returns the number of elements the vector can hold.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":75612,"byte_end":75667,"line_start":213,"line_end":213,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":518},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":75814,"byte_end":75822,"line_start":219,"line_end":219,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<FixedVec>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the vector contains no elements.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the vector contains no elements.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":75748,"byte_end":75802,"line_start":218,"line_end":218,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":519},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":76510,"byte_end":76514,"line_start":242,"line_end":242,"column_start":12,"column_end":16},"name":"push","qualname":"<FixedVec>::push","value":"pub fn push(&mut Self, T) -> Result<(), T>","parent":null,"children":[],"decl_id":null,"docs":" Appends an element to the back of a collection.","sig":null,"attributes":[{"value":"/ Appends an element to the back of a collection.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":75876,"byte_end":75927,"line_start":223,"line_end":223,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":75932,"byte_end":75935,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ Return `Err(val)` if it is not possible to append the element.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":75940,"byte_end":76006,"line_start":225,"line_end":225,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":76011,"byte_end":76014,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":76019,"byte_end":76026,"line_start":227,"line_end":227,"column_start":5,"column_end":12}},{"value":"/ use core::mem::MaybeUninit;","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":76031,"byte_end":76062,"line_start":228,"line_end":228,"column_start":5,"column_end":36}},{"value":"/ use without_alloc::{FixedVec, Uninit};","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":76067,"byte_end":76109,"line_start":229,"line_end":229,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":76114,"byte_end":76117,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ // Only enough storage for one element.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":76122,"byte_end":76165,"line_start":231,"line_end":231,"column_start":5,"column_end":48}},{"value":"/ let mut allocation: [MaybeUninit<u32>; 1] = [MaybeUninit::uninit()];","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":76170,"byte_end":76242,"line_start":232,"line_end":232,"column_start":5,"column_end":77}},{"value":"/ let mut vec = FixedVec::new(Uninit::from(&mut allocation[..]));","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":76247,"byte_end":76314,"line_start":233,"line_end":233,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":76319,"byte_end":76322,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ // First push succeeds.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":76327,"byte_end":76354,"line_start":235,"line_end":235,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(vec.push(1), Ok(()));","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":76359,"byte_end":76395,"line_start":236,"line_end":236,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":76400,"byte_end":76403,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ // The second push fails.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":76408,"byte_end":76437,"line_start":238,"line_end":238,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(vec.push(2), Err(2));","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":76442,"byte_end":76478,"line_start":239,"line_end":239,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":76483,"byte_end":76486,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":76491,"byte_end":76498,"line_start":241,"line_end":241,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":520},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":76958,"byte_end":76961,"line_start":259,"line_end":259,"column_start":12,"column_end":15},"name":"pop","qualname":"<FixedVec>::pop","value":"pub fn pop(&mut Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes the last element from a vector and returns it, or `None` if it is empty.\n","sig":null,"attributes":[{"value":"/ Removes the last element from a vector and returns it, or `None` if it is empty.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":76862,"byte_end":76946,"line_start":258,"line_end":258,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":521},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":78666,"byte_end":78680,"line_start":309,"line_end":309,"column_start":12,"column_end":26},"name":"split_borrowed","qualname":"<FixedVec>::split_borrowed","value":"pub fn split_borrowed(&mut Self, usize) -> FixedVec<, T>","parent":null,"children":[],"decl_id":null,"docs":" Split the capacity into a *borrowed* other vector.","sig":null,"attributes":[{"value":"/ Split the capacity into a *borrowed* other vector.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":77328,"byte_end":77382,"line_start":274,"line_end":274,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":77387,"byte_end":77390,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ The other vector borrows the underlying memory resource while it is alive.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":77395,"byte_end":77473,"line_start":276,"line_end":276,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":77478,"byte_end":77481,"line_start":277,"line_end":277,"column_start":5,"column_end":8}},{"value":"/ This is a specialized method not found in the standard `Vec` as it relies on `FixedVec` not","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":77486,"byte_end":77581,"line_start":278,"line_end":278,"column_start":5,"column_end":100}},{"value":"/ owning the allocation itself. This avoids splitting the underlying allocation which would","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":77586,"byte_end":77679,"line_start":279,"line_end":279,"column_start":5,"column_end":98}},{"value":"/ require `unsafe` to mend the parts together.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":77684,"byte_end":77732,"line_start":280,"line_end":280,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":77737,"byte_end":77740,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ ## Panics","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":77745,"byte_end":77758,"line_start":282,"line_end":282,"column_start":5,"column_end":18}},{"value":"/ This method panics if `at > self.capacity()`.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":77763,"byte_end":77812,"line_start":283,"line_end":283,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":77817,"byte_end":77820,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ ## Examples","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":77825,"byte_end":77840,"line_start":285,"line_end":285,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":77845,"byte_end":77848,"line_start":286,"line_end":286,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":77853,"byte_end":77860,"line_start":287,"line_end":287,"column_start":5,"column_end":12}},{"value":"/ use without_alloc::{FixedVec, alloc::LocalAllocLeakExt};","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":77865,"byte_end":77925,"line_start":288,"line_end":288,"column_start":5,"column_end":65}},{"value":"/ use static_alloc::Bump;","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":77930,"byte_end":77957,"line_start":289,"line_end":289,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":77962,"byte_end":77965,"line_start":290,"line_end":290,"column_start":5,"column_end":8}},{"value":"/ let mut memory: Bump<[usize; 8]> = Bump::uninit();","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":77970,"byte_end":78024,"line_start":291,"line_end":291,"column_start":5,"column_end":59}},{"value":"/ let mut vec = memory.fixed_vec::<usize>(8).unwrap();","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":78029,"byte_end":78085,"line_start":292,"line_end":292,"column_start":5,"column_end":61}},{"value":"/ vec.fill(0..7);","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":78090,"byte_end":78109,"line_start":293,"line_end":293,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":78114,"byte_end":78117,"line_start":294,"line_end":294,"column_start":5,"column_end":8}},{"value":"/ // Can use like a vector:","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":78122,"byte_end":78151,"line_start":295,"line_end":295,"column_start":5,"column_end":34}},{"value":"/ let mut part = vec.split_borrowed(4);","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":78156,"byte_end":78197,"line_start":296,"line_end":296,"column_start":5,"column_end":46}},{"value":"/ assert!(part.push(7).is_ok());","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":78202,"byte_end":78236,"line_start":297,"line_end":297,"column_start":5,"column_end":39}},{"value":"/ assert!((4..8).eq(part.drain(..)));","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":78241,"byte_end":78280,"line_start":298,"line_end":298,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":78285,"byte_end":78288,"line_start":299,"line_end":299,"column_start":5,"column_end":8}},{"value":"/ // Drop to rescind the borrow on `vec`.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":78293,"byte_end":78336,"line_start":300,"line_end":300,"column_start":5,"column_end":48}},{"value":"/ drop(part);","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":78341,"byte_end":78356,"line_start":301,"line_end":301,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":78361,"byte_end":78364,"line_start":302,"line_end":302,"column_start":5,"column_end":8}},{"value":"/ // All split elements are gone","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":78369,"byte_end":78403,"line_start":303,"line_end":303,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(vec.len(), 4);","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":78408,"byte_end":78437,"line_start":304,"line_end":304,"column_start":5,"column_end":34}},{"value":"/ // But retained all capacity","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":78442,"byte_end":78474,"line_start":305,"line_end":305,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(vec.capacity(), 8);","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":78479,"byte_end":78513,"line_start":306,"line_end":306,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":78518,"byte_end":78525,"line_start":307,"line_end":307,"column_start":5,"column_end":12}},{"value":"must_use =\n  \"Elements in the split tail will be dropped. Prefer `truncate(at)` or `drain(at..)` if there is no other use.\"","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":78530,"byte_end":78654,"line_start":308,"line_end":308,"column_start":5,"column_end":129}}]},{"kind":"Method","id":{"krate":0,"index":522},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":79313,"byte_end":79332,"line_start":326,"line_end":326,"column_start":12,"column_end":31},"name":"split_and_shrink_to","qualname":"<FixedVec>::split_and_shrink_to","value":"pub fn split_and_shrink_to(&mut Self, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Split the capacity of the collection into two at a given index.","sig":null,"attributes":[{"value":"/ Split the capacity of the collection into two at a given index.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":79046,"byte_end":79113,"line_start":320,"line_end":320,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":79118,"byte_end":79121,"line_start":321,"line_end":321,"column_start":5,"column_end":8}},{"value":"/ In contrast to `Vec::split_off` calling this method reduces the capacity of `self` to `at`.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":79126,"byte_end":79221,"line_start":322,"line_end":322,"column_start":5,"column_end":100}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":79226,"byte_end":79229,"line_start":323,"line_end":323,"column_start":5,"column_end":8}},{"value":"/ ## Panics","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":79234,"byte_end":79247,"line_start":324,"line_end":324,"column_start":5,"column_end":18}},{"value":"/ This method panics if `at > self.capacity()`.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":79252,"byte_end":79301,"line_start":325,"line_end":325,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":523},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":79943,"byte_end":79947,"line_start":342,"line_end":342,"column_start":12,"column_end":16},"name":"fill","qualname":"<FixedVec>::fill","value":"pub fn fill<I: IntoIterator<Item = T>>(&mut Self, I) -> I::IntoIter","parent":null,"children":[],"decl_id":null,"docs":" Extend the vector with as many elements as fit.","sig":null,"attributes":[{"value":"/ Extend the vector with as many elements as fit.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":79787,"byte_end":79838,"line_start":339,"line_end":339,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":79843,"byte_end":79846,"line_start":340,"line_end":340,"column_start":5,"column_end":8}},{"value":"/ Returns the iterator with all elements that were not pushed into the vector.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":79851,"byte_end":79931,"line_start":341,"line_end":341,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":525},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":81149,"byte_end":81154,"line_start":369,"line_end":369,"column_start":12,"column_end":17},"name":"drain","qualname":"<FixedVec>::drain","value":"pub fn drain<R>(&mut Self, R) -> Drain<, T> where R: ops::RangeBounds<usize>","parent":null,"children":[],"decl_id":null,"docs":" Creates a draining iterator that yields and removes elements a given range.","sig":null,"attributes":[{"value":"/ Creates a draining iterator that yields and removes elements a given range.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":80730,"byte_end":80809,"line_start":362,"line_end":362,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":80814,"byte_end":80817,"line_start":363,"line_end":363,"column_start":5,"column_end":8}},{"value":"/ It is unspecified which elements are removed if the `Drain` is never dropped. If you","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":80822,"byte_end":80910,"line_start":364,"line_end":364,"column_start":5,"column_end":93}},{"value":"/ require precise semantics even in this case you might be able to swap the range to the back","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":80915,"byte_end":81010,"line_start":365,"line_end":365,"column_start":5,"column_end":100}},{"value":"/ of the vector and invoke [`split_and_shrink_to`].","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":81015,"byte_end":81068,"line_start":366,"line_end":366,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":81073,"byte_end":81076,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ [`split_and_shrink_to`]: #method.split_and_shrink_to","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":81081,"byte_end":81137,"line_start":368,"line_end":368,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":532},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":83351,"byte_end":83354,"line_start":428,"line_end":428,"column_start":12,"column_end":15},"name":"new","qualname":"<FixedVec>::new","value":"pub fn new(Uninit) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a `FixedVec` in a pre-allocated region.","sig":null,"attributes":[{"value":"/ Create a `FixedVec` in a pre-allocated region.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":83217,"byte_end":83267,"line_start":425,"line_end":425,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":83272,"byte_end":83275,"line_start":426,"line_end":426,"column_start":5,"column_end":8}},{"value":"/ The capacity will be that of the underlying allocation.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":83280,"byte_end":83339,"line_start":427,"line_end":427,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":533},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":84006,"byte_end":84020,"line_start":445,"line_end":445,"column_start":12,"column_end":26},"name":"from_unaligned","qualname":"<FixedVec>::from_unaligned","value":"pub fn from_unaligned<U: ?Sized>(Uninit) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a `FixedVec` with as large of a capacity as available.","sig":null,"attributes":[{"value":"/ Create a `FixedVec` with as large of a capacity as available.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":83473,"byte_end":83538,"line_start":435,"line_end":435,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":83543,"byte_end":83546,"line_start":436,"line_end":436,"column_start":5,"column_end":8}},{"value":"/ When no aligned slice can be create within the provided memory then the constructor will","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":83551,"byte_end":83643,"line_start":437,"line_end":437,"column_start":5,"column_end":97}},{"value":"/ fallback to an empty dangling slice.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":83648,"byte_end":83688,"line_start":438,"line_end":438,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":83693,"byte_end":83696,"line_start":439,"line_end":439,"column_start":5,"column_end":8}},{"value":"/ This is only a utility function which may be lossy as data before the alignment is","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":83701,"byte_end":83787,"line_start":440,"line_end":440,"column_start":5,"column_end":91}},{"value":"/ discarded. Prefer an explicit [`Uninit::cast_slice`] followed by error handling if this is","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":83792,"byte_end":83886,"line_start":441,"line_end":441,"column_start":5,"column_end":99}},{"value":"/ undesirable.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":83891,"byte_end":83907,"line_start":442,"line_end":442,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":83912,"byte_end":83915,"line_start":443,"line_end":443,"column_start":5,"column_end":8}},{"value":"/ [`Uninit::cast_slice`]: ../uninit/struct.Uninit.html#method.cast_slice","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":83920,"byte_end":83994,"line_start":444,"line_end":444,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":535},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":84343,"byte_end":84356,"line_start":454,"line_end":454,"column_start":12,"column_end":25},"name":"shrink_to_fit","qualname":"<FixedVec>::shrink_to_fit","value":"pub fn shrink_to_fit(&mut Self) -> Uninit","parent":null,"children":[],"decl_id":null,"docs":" Return trailing bytes that can not be used by the `FixedVec`.","sig":null,"attributes":[{"value":"/ Return trailing bytes that can not be used by the `FixedVec`.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":84220,"byte_end":84285,"line_start":451,"line_end":451,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":84290,"byte_end":84293,"line_start":452,"line_end":452,"column_start":5,"column_end":8}},{"value":"/ This operation is idempotent.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":84298,"byte_end":84331,"line_start":453,"line_end":453,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":538},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":84696,"byte_end":84704,"line_start":464,"line_end":464,"column_start":12,"column_end":20},"name":"as_slice","qualname":"<Drain>::as_slice","value":"pub fn as_slice(&Self) -> &[T]","parent":null,"children":[],"decl_id":null,"docs":" View the remaining data as a slice.","sig":null,"attributes":[{"value":"/ View the remaining data as a slice.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":84460,"byte_end":84499,"line_start":460,"line_end":460,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":84504,"byte_end":84507,"line_start":461,"line_end":461,"column_start":5,"column_end":8}},{"value":"/ Similar to `slice::Iter::as_slice` but you are not allowed to use the iterator as it will","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":84512,"byte_end":84605,"line_start":462,"line_end":462,"column_start":5,"column_end":98}},{"value":"/ invalidate the pointees. This is an extended form of `Peekable::peek`.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":84610,"byte_end":84684,"line_start":463,"line_end":463,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":539},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":85119,"byte_end":85131,"line_start":477,"line_end":477,"column_start":12,"column_end":24},"name":"as_mut_slice","qualname":"<Drain>::as_mut_slice","value":"pub fn as_mut_slice(&mut Self) -> &mut [T]","parent":null,"children":[],"decl_id":null,"docs":" View the remaining data as a mutable slice.","sig":null,"attributes":[{"value":"/ View the remaining data as a mutable slice.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":85006,"byte_end":85053,"line_start":474,"line_end":474,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":85058,"byte_end":85061,"line_start":475,"line_end":475,"column_start":5,"column_end":8}},{"value":"/ This is `Peekable::peek` on steroids.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":85066,"byte_end":85107,"line_start":476,"line_end":476,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":540},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":85549,"byte_end":85552,"line_start":488,"line_end":488,"column_start":12,"column_end":15},"name":"len","qualname":"<Drain>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The count of remaining elements to drain.\n","sig":null,"attributes":[{"value":"/ The count of remaining elements to drain.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":85492,"byte_end":85537,"line_start":487,"line_end":487,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":541},"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":85664,"byte_end":85672,"line_start":493,"line_end":493,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Drain>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" If there are any elements remaining.\n","sig":null,"attributes":[{"value":"/ If there are any elements remaining.","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":85612,"byte_end":85652,"line_start":492,"line_end":492,"column_start":5,"column_end":45}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/alloc.rs","byte_start":5669,"byte_end":5670,"line_start":125,"line_end":125,"column_start":47,"column_end":48},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/alloc.rs","byte_start":5719,"byte_end":5735,"line_start":129,"line_end":129,"column_start":11,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":48}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/alloc.rs","byte_start":6052,"byte_end":6068,"line_start":141,"line_end":141,"column_start":13,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":52},{"krate":0,"index":54}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":9078,"byte_end":9081,"line_start":66,"line_end":66,"column_start":13,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":91},{"krate":0,"index":92},{"krate":0,"index":93}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":10929,"byte_end":10932,"line_start":123,"line_end":123,"column_start":18,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":96}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":11078,"byte_end":11081,"line_start":131,"line_end":131,"column_start":24,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":99},{"krate":0,"index":100}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":11235,"byte_end":11238,"line_start":141,"line_end":141,"column_start":27,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":103}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":11409,"byte_end":11412,"line_start":149,"line_end":149,"column_start":54,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":108},{"krate":0,"index":109}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":11688,"byte_end":11691,"line_start":160,"line_end":160,"column_start":56,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":118}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":12285,"byte_end":12288,"line_start":183,"line_end":183,"column_start":22,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":121}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":12429,"byte_end":12432,"line_start":190,"line_end":190,"column_start":20,"column_end":23},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":12480,"byte_end":12483,"line_start":192,"line_end":192,"column_start":36,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":126}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":12619,"byte_end":12622,"line_start":198,"line_end":198,"column_start":36,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":130}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":12761,"byte_end":12764,"line_start":204,"line_end":204,"column_start":26,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":133}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":12927,"byte_end":12930,"line_start":210,"line_end":210,"column_start":31,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":136}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":13027,"byte_end":13030,"line_start":216,"line_end":216,"column_start":34,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":139}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":13131,"byte_end":13134,"line_start":222,"line_end":222,"column_start":22,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":142}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":13219,"byte_end":13222,"line_start":228,"line_end":228,"column_start":22,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":145}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":16622,"byte_end":16624,"line_start":75,"line_end":75,"column_start":13,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":198},{"krate":0,"index":199},{"krate":0,"index":200},{"krate":0,"index":201},{"krate":0,"index":202}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":21236,"byte_end":21238,"line_start":219,"line_end":219,"column_start":9,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":205},{"krate":0,"index":206},{"krate":0,"index":207},{"krate":0,"index":208},{"krate":0,"index":209},{"krate":0,"index":210},{"krate":0,"index":211},{"krate":0,"index":212},{"krate":0,"index":213},{"krate":0,"index":214},{"krate":0,"index":215},{"krate":0,"index":216},{"krate":0,"index":217}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":25167,"byte_end":25171,"line_start":350,"line_end":350,"column_start":13,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":221},{"krate":0,"index":222}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":27385,"byte_end":27389,"line_start":419,"line_end":419,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":225},{"krate":0,"index":226},{"krate":0,"index":227},{"krate":0,"index":228},{"krate":0,"index":229},{"krate":0,"index":230},{"krate":0,"index":231}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":29414,"byte_end":29416,"line_start":491,"line_end":491,"column_start":18,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":234}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":30522,"byte_end":30524,"line_start":533,"line_end":533,"column_start":24,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":237},{"krate":0,"index":238}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":30637,"byte_end":30639,"line_start":541,"line_end":541,"column_start":19,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":241}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":31404,"byte_end":31408,"line_start":571,"line_end":571,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":244}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":31552,"byte_end":31556,"line_start":578,"line_end":578,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":247}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":32346,"byte_end":32348,"line_start":609,"line_end":609,"column_start":53,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":252},{"krate":0,"index":253}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":32586,"byte_end":32588,"line_start":620,"line_end":620,"column_start":20,"column_end":22},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":32655,"byte_end":32657,"line_start":622,"line_end":622,"column_start":55,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":260},{"krate":0,"index":261},{"krate":0,"index":262},{"krate":0,"index":263},{"krate":0,"index":264}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":33246,"byte_end":33248,"line_start":645,"line_end":645,"column_start":22,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":267}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":33404,"byte_end":33406,"line_start":652,"line_end":652,"column_start":36,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":270}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":33546,"byte_end":33548,"line_start":658,"line_end":658,"column_start":40,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":274}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":33699,"byte_end":33701,"line_start":664,"line_end":664,"column_start":36,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":277}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":33840,"byte_end":33842,"line_start":670,"line_end":670,"column_start":26,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":280}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":33995,"byte_end":33997,"line_start":676,"line_end":676,"column_start":31,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":283}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":34082,"byte_end":34084,"line_start":682,"line_end":682,"column_start":22,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":286}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":40498,"byte_end":40504,"line_start":105,"line_end":105,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":323},{"krate":0,"index":324}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Inherent","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":41746,"byte_end":41752,"line_start":136,"line_end":136,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":327},{"krate":0,"index":329},{"krate":0,"index":331}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Inherent","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":43264,"byte_end":43270,"line_start":173,"line_end":173,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":335}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":43620,"byte_end":43626,"line_start":184,"line_end":184,"column_start":13,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":339},{"krate":0,"index":340},{"krate":0,"index":341},{"krate":0,"index":342},{"krate":0,"index":344},{"krate":0,"index":346},{"krate":0,"index":347},{"krate":0,"index":348},{"krate":0,"index":349},{"krate":0,"index":350},{"krate":0,"index":351},{"krate":0,"index":352},{"krate":0,"index":353},{"krate":0,"index":354},{"krate":0,"index":355},{"krate":0,"index":356}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Inherent","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":49515,"byte_end":49521,"line_start":332,"line_end":332,"column_start":13,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":360},{"krate":0,"index":361},{"krate":0,"index":362},{"krate":0,"index":363},{"krate":0,"index":364},{"krate":0,"index":365},{"krate":0,"index":366},{"krate":0,"index":367},{"krate":0,"index":368}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Inherent","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":53339,"byte_end":53345,"line_start":428,"line_end":428,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":372},{"krate":0,"index":373},{"krate":0,"index":374},{"krate":0,"index":375},{"krate":0,"index":376},{"krate":0,"index":377}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":54658,"byte_end":54668,"line_start":472,"line_end":472,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":379},{"krate":0,"index":380}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Inherent","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":56071,"byte_end":56081,"line_start":514,"line_end":514,"column_start":10,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":384},{"krate":0,"index":386},{"krate":0,"index":388}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Inherent","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":56901,"byte_end":56911,"line_start":540,"line_end":540,"column_start":9,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":392}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Inherent","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":57450,"byte_end":57460,"line_start":554,"line_end":554,"column_start":13,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":396},{"krate":0,"index":397},{"krate":0,"index":398},{"krate":0,"index":400},{"krate":0,"index":402},{"krate":0,"index":403},{"krate":0,"index":404},{"krate":0,"index":405},{"krate":0,"index":406},{"krate":0,"index":407}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Inherent","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":61632,"byte_end":61642,"line_start":671,"line_end":671,"column_start":13,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":411},{"krate":0,"index":412},{"krate":0,"index":413},{"krate":0,"index":414},{"krate":0,"index":415},{"krate":0,"index":416},{"krate":0,"index":417},{"krate":0,"index":418},{"krate":0,"index":419}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":65974,"byte_end":65984,"line_start":778,"line_end":778,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":423},{"krate":0,"index":424},{"krate":0,"index":425}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":66568,"byte_end":66574,"line_start":798,"line_end":798,"column_start":51,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":429}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":66745,"byte_end":66751,"line_start":804,"line_end":804,"column_start":53,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":433}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":66928,"byte_end":66938,"line_start":810,"line_end":810,"column_start":47,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":437}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":67100,"byte_end":67110,"line_start":816,"line_end":816,"column_start":49,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":441}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":67272,"byte_end":67278,"line_start":822,"line_end":822,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":444}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":67505,"byte_end":67515,"line_start":831,"line_end":831,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":447}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":67741,"byte_end":67751,"line_start":840,"line_end":840,"column_start":37,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":451}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":67855,"byte_end":67861,"line_start":846,"line_end":846,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":454}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":67950,"byte_end":67960,"line_start":852,"line_end":852,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":457}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":68059,"byte_end":68069,"line_start":858,"line_end":858,"column_start":27,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":460}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":68157,"byte_end":68167,"line_start":864,"line_end":864,"column_start":26,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":72523,"byte_end":72531,"line_start":118,"line_end":118,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":505},{"krate":0,"index":512},{"krate":0,"index":513},{"krate":0,"index":514},{"krate":0,"index":515},{"krate":0,"index":516},{"krate":0,"index":517},{"krate":0,"index":518},{"krate":0,"index":519},{"krate":0,"index":520},{"krate":0,"index":521},{"krate":0,"index":522},{"krate":0,"index":523},{"krate":0,"index":525},{"krate":0,"index":527},{"krate":0,"index":528}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":73813,"byte_end":73825,"line_start":152,"line_end":152,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":511}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":83195,"byte_end":83203,"line_start":424,"line_end":424,"column_start":13,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":532},{"krate":0,"index":533},{"krate":0,"index":535}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":84441,"byte_end":84446,"line_start":459,"line_end":459,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":538},{"krate":0,"index":539},{"krate":0,"index":540},{"krate":0,"index":541}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":85753,"byte_end":85761,"line_start":498,"line_end":498,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":544},{"krate":0,"index":545}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":85883,"byte_end":85891,"line_start":505,"line_end":505,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":548}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":85997,"byte_end":86005,"line_start":511,"line_end":511,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":551}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":86157,"byte_end":86165,"line_start":519,"line_end":519,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":555},{"krate":0,"index":556}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":86367,"byte_end":86375,"line_start":529,"line_end":529,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":560}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":86595,"byte_end":86603,"line_start":537,"line_end":537,"column_start":59,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":565},{"krate":0,"index":566}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":86894,"byte_end":86902,"line_start":548,"line_end":548,"column_start":61,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":571},{"krate":0,"index":572},{"krate":0,"index":573},{"krate":0,"index":574},{"krate":0,"index":575}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":87521,"byte_end":87529,"line_start":571,"line_end":571,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":578}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":87675,"byte_end":87683,"line_start":578,"line_end":578,"column_start":20,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":87731,"byte_end":87739,"line_start":580,"line_end":580,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":583}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":87884,"byte_end":87892,"line_start":586,"line_end":586,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":587}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":87993,"byte_end":88001,"line_start":592,"line_end":592,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":590}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":88106,"byte_end":88114,"line_start":598,"line_end":598,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":593}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":88203,"byte_end":88211,"line_start":604,"line_end":604,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":596}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":88310,"byte_end":88315,"line_start":610,"line_end":610,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":599},{"krate":0,"index":600},{"krate":0,"index":601}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":88813,"byte_end":88818,"line_start":632,"line_end":632,"column_start":33,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":604}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":89195,"byte_end":89200,"line_start":648,"line_end":648,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":607}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":89305,"byte_end":89310,"line_start":654,"line_end":654,"column_start":33,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":89340,"byte_end":89345,"line_start":656,"line_end":656,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":612}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":91179,"byte_end":91187,"line_start":708,"line_end":708,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":615}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/lib.rs","byte_start":1117,"byte_end":1122,"line_start":32,"line_end":32,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":4}},{"kind":"Mod","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/lib.rs","byte_start":1132,"byte_end":1137,"line_start":33,"line_end":33,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":56}},{"kind":"Mod","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/lib.rs","byte_start":1147,"byte_end":1149,"line_start":34,"line_end":34,"column_start":9,"column_end":11},"ref_id":{"krate":0,"index":146}},{"kind":"Mod","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/lib.rs","byte_start":1159,"byte_end":1165,"line_start":35,"line_end":35,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":287}},{"kind":"Mod","span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/lib.rs","byte_start":1175,"byte_end":1184,"line_start":36,"line_end":36,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":463}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/alloc.rs","byte_start":1884,"byte_end":1894,"line_start":23,"line_end":23,"column_start":38,"column_end":48},"kind":"SuperTrait","from":{"krate":4,"index":56},"to":{"krate":0,"index":32}},{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/alloc.rs","byte_start":5669,"byte_end":5670,"line_start":125,"line_end":125,"column_start":47,"column_end":48},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":45},"to":{"krate":0,"index":32}},{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/alloc.rs","byte_start":5719,"byte_end":5735,"line_start":129,"line_end":129,"column_start":11,"column_end":27},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":626},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/alloc.rs","byte_start":6052,"byte_end":6068,"line_start":141,"line_end":141,"column_start":13,"column_end":29},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":626},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":9078,"byte_end":9081,"line_start":66,"line_end":66,"column_start":13,"column_end":16},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":82},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":10929,"byte_end":10932,"line_start":123,"line_end":123,"column_start":18,"column_end":21},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":82},"to":{"krate":1,"index":3115}},{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":11078,"byte_end":11081,"line_start":131,"line_end":131,"column_start":24,"column_end":27},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":82},"to":{"krate":1,"index":3091}},{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":11235,"byte_end":11238,"line_start":141,"line_end":141,"column_start":27,"column_end":30},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":82},"to":{"krate":1,"index":3104}},{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":11409,"byte_end":11412,"line_start":149,"line_end":149,"column_start":54,"column_end":57},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":82},"to":{"krate":1,"index":2531}},{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":11688,"byte_end":11691,"line_start":160,"line_end":160,"column_start":56,"column_end":59},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":82},"to":{"krate":1,"index":2578}},{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":12285,"byte_end":12288,"line_start":183,"line_end":183,"column_start":22,"column_end":25},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":82},"to":{"krate":1,"index":2567}},{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":12429,"byte_end":12432,"line_start":190,"line_end":190,"column_start":20,"column_end":23},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":82},"to":{"krate":1,"index":2536}},{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":12480,"byte_end":12483,"line_start":192,"line_end":192,"column_start":36,"column_end":39},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":82},"to":{"krate":1,"index":9168}},{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":12619,"byte_end":12622,"line_start":198,"line_end":198,"column_start":36,"column_end":39},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":82},"to":{"krate":1,"index":8962}},{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":12761,"byte_end":12764,"line_start":204,"line_end":204,"column_start":26,"column_end":29},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":82},"to":{"krate":1,"index":8979}},{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":12927,"byte_end":12930,"line_start":210,"line_end":210,"column_start":31,"column_end":34},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":82},"to":{"krate":1,"index":2479}},{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":13027,"byte_end":13030,"line_start":216,"line_end":216,"column_start":34,"column_end":37},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":82},"to":{"krate":1,"index":2482}},{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":13131,"byte_end":13134,"line_start":222,"line_end":222,"column_start":22,"column_end":25},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":82},"to":{"krate":1,"index":2777}},{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/boxed.rs","byte_start":13219,"byte_end":13222,"line_start":228,"line_end":228,"column_start":22,"column_end":25},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":82},"to":{"krate":1,"index":2780}},{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":16622,"byte_end":16624,"line_start":75,"line_end":75,"column_start":13,"column_end":15},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":182},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":21236,"byte_end":21238,"line_start":219,"line_end":219,"column_start":9,"column_end":11},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":182},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":25167,"byte_end":25171,"line_start":350,"line_end":350,"column_start":13,"column_end":17},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":186},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":27385,"byte_end":27389,"line_start":419,"line_end":419,"column_start":9,"column_end":13},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":186},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":29414,"byte_end":29416,"line_start":491,"line_end":491,"column_start":18,"column_end":20},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":182},"to":{"krate":1,"index":3115}},{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":30522,"byte_end":30524,"line_start":533,"line_end":533,"column_start":24,"column_end":26},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":182},"to":{"krate":1,"index":3091}},{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":30637,"byte_end":30639,"line_start":541,"line_end":541,"column_start":19,"column_end":21},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":182},"to":{"krate":1,"index":2501}},{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":31404,"byte_end":31408,"line_start":571,"line_end":571,"column_start":18,"column_end":22},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":3115}},{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":31552,"byte_end":31556,"line_start":578,"line_end":578,"column_start":19,"column_end":23},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":2501}},{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":32346,"byte_end":32348,"line_start":609,"line_end":609,"column_start":53,"column_end":55},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":182},"to":{"krate":1,"index":2531}},{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":32586,"byte_end":32588,"line_start":620,"line_end":620,"column_start":20,"column_end":22},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":182},"to":{"krate":1,"index":2536}},{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":32655,"byte_end":32657,"line_start":622,"line_end":622,"column_start":55,"column_end":57},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":182},"to":{"krate":1,"index":2578}},{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":33246,"byte_end":33248,"line_start":645,"line_end":645,"column_start":22,"column_end":24},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":182},"to":{"krate":1,"index":2567}},{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":33404,"byte_end":33406,"line_start":652,"line_end":652,"column_start":36,"column_end":38},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":182},"to":{"krate":1,"index":9168}},{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":33546,"byte_end":33548,"line_start":658,"line_end":658,"column_start":40,"column_end":42},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":182},"to":{"krate":1,"index":8969}},{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":33699,"byte_end":33701,"line_start":664,"line_end":664,"column_start":36,"column_end":38},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":182},"to":{"krate":1,"index":8962}},{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":33840,"byte_end":33842,"line_start":670,"line_end":670,"column_start":26,"column_end":28},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":182},"to":{"krate":1,"index":8979}},{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":33995,"byte_end":33997,"line_start":676,"line_end":676,"column_start":31,"column_end":33},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":182},"to":{"krate":1,"index":2479}},{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/rc.rs","byte_start":34082,"byte_end":34084,"line_start":682,"line_end":682,"column_start":22,"column_end":24},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":182},"to":{"krate":1,"index":2777}},{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":40498,"byte_end":40504,"line_start":105,"line_end":105,"column_start":6,"column_end":12},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":310},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":41746,"byte_end":41752,"line_start":136,"line_end":136,"column_start":10,"column_end":16},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":310},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":43264,"byte_end":43270,"line_start":173,"line_end":173,"column_start":9,"column_end":15},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":310},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":43620,"byte_end":43626,"line_start":184,"line_end":184,"column_start":13,"column_end":19},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":310},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":49515,"byte_end":49521,"line_start":332,"line_end":332,"column_start":13,"column_end":19},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":310},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":53339,"byte_end":53345,"line_start":428,"line_end":428,"column_start":21,"column_end":27},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":310},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":54658,"byte_end":54668,"line_start":472,"line_end":472,"column_start":6,"column_end":16},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":315},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":56071,"byte_end":56081,"line_start":514,"line_end":514,"column_start":10,"column_end":20},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":315},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":56901,"byte_end":56911,"line_start":540,"line_end":540,"column_start":9,"column_end":19},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":315},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":57450,"byte_end":57460,"line_start":554,"line_end":554,"column_start":13,"column_end":23},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":315},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":61632,"byte_end":61642,"line_start":671,"line_end":671,"column_start":13,"column_end":23},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":315},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":65974,"byte_end":65984,"line_start":778,"line_end":778,"column_start":21,"column_end":31},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":315},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":66568,"byte_end":66574,"line_start":798,"line_end":798,"column_start":51,"column_end":57},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":310},"to":{"krate":1,"index":2786}},{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":66745,"byte_end":66751,"line_start":804,"line_end":804,"column_start":53,"column_end":59},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":310},"to":{"krate":1,"index":2786}},{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":66928,"byte_end":66938,"line_start":810,"line_end":810,"column_start":47,"column_end":57},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":315},"to":{"krate":1,"index":2786}},{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":67100,"byte_end":67110,"line_start":816,"line_end":816,"column_start":49,"column_end":59},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":315},"to":{"krate":1,"index":2786}},{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":67272,"byte_end":67278,"line_start":822,"line_end":822,"column_start":32,"column_end":38},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":310},"to":{"krate":1,"index":8962}},{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":67505,"byte_end":67515,"line_start":831,"line_end":831,"column_start":32,"column_end":42},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":315},"to":{"krate":1,"index":8962}},{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":67741,"byte_end":67751,"line_start":840,"line_end":840,"column_start":37,"column_end":47},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":315},"to":{"krate":1,"index":2786}},{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":67855,"byte_end":67861,"line_start":846,"line_end":846,"column_start":21,"column_end":27},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":310},"to":{"krate":1,"index":2858}},{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":67950,"byte_end":67960,"line_start":852,"line_end":852,"column_start":21,"column_end":31},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":315},"to":{"krate":1,"index":2858}},{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":68059,"byte_end":68069,"line_start":858,"line_end":858,"column_start":27,"column_end":37},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":315},"to":{"krate":1,"index":2501}},{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/uninit.rs","byte_start":68157,"byte_end":68167,"line_start":864,"line_end":864,"column_start":26,"column_end":36},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":315},"to":{"krate":1,"index":2890}},{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":72523,"byte_end":72531,"line_start":118,"line_end":118,"column_start":9,"column_end":17},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":489},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":73813,"byte_end":73825,"line_start":152,"line_end":152,"column_start":23,"column_end":35},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":506},"to":{"krate":1,"index":3115}},{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":83195,"byte_end":83203,"line_start":424,"line_end":424,"column_start":13,"column_end":21},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":489},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":84441,"byte_end":84446,"line_start":459,"line_end":459,"column_start":9,"column_end":14},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":494},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":85753,"byte_end":85761,"line_start":498,"line_end":498,"column_start":24,"column_end":32},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":489},"to":{"krate":1,"index":3091}},{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":85883,"byte_end":85891,"line_start":505,"line_end":505,"column_start":27,"column_end":35},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":489},"to":{"krate":1,"index":3104}},{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":85997,"byte_end":86005,"line_start":511,"line_end":511,"column_start":18,"column_end":26},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":489},"to":{"krate":1,"index":3115}},{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":86157,"byte_end":86165,"line_start":519,"line_end":519,"column_start":30,"column_end":38},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":489},"to":{"krate":1,"index":3176}},{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":86367,"byte_end":86375,"line_start":529,"line_end":529,"column_start":33,"column_end":41},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":489},"to":{"krate":1,"index":3180}},{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":86595,"byte_end":86603,"line_start":537,"line_end":537,"column_start":59,"column_end":67},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":489},"to":{"krate":1,"index":2531}},{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":86894,"byte_end":86902,"line_start":548,"line_end":548,"column_start":61,"column_end":69},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":489},"to":{"krate":1,"index":2578}},{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":87521,"byte_end":87529,"line_start":571,"line_end":571,"column_start":22,"column_end":30},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":489},"to":{"krate":1,"index":2567}},{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":87675,"byte_end":87683,"line_start":578,"line_end":578,"column_start":20,"column_end":28},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":489},"to":{"krate":1,"index":2536}},{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":87731,"byte_end":87739,"line_start":580,"line_end":580,"column_start":36,"column_end":44},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":489},"to":{"krate":1,"index":9168}},{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":87884,"byte_end":87892,"line_start":586,"line_end":586,"column_start":33,"column_end":41},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":489},"to":{"krate":1,"index":2479}},{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":87993,"byte_end":88001,"line_start":592,"line_end":592,"column_start":36,"column_end":44},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":489},"to":{"krate":1,"index":2482}},{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":88106,"byte_end":88114,"line_start":598,"line_end":598,"column_start":24,"column_end":32},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":489},"to":{"krate":1,"index":2777}},{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":88203,"byte_end":88211,"line_start":604,"line_end":604,"column_start":24,"column_end":32},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":489},"to":{"krate":1,"index":2780}},{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":88310,"byte_end":88315,"line_start":610,"line_end":610,"column_start":22,"column_end":27},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":494},"to":{"krate":1,"index":7383}},{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":88813,"byte_end":88818,"line_start":632,"line_end":632,"column_start":33,"column_end":38},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":494},"to":{"krate":1,"index":7247}},{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":89195,"byte_end":89200,"line_start":648,"line_end":648,"column_start":31,"column_end":36},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":494},"to":{"krate":1,"index":7272}},{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":89305,"byte_end":89310,"line_start":654,"line_end":654,"column_start":33,"column_end":38},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":494},"to":{"krate":1,"index":7659}},{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":89340,"byte_end":89345,"line_start":656,"line_end":656,"column_start":18,"column_end":23},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":494},"to":{"krate":1,"index":3115}},{"span":{"file_name":"/Users/nolanjacobsonpersonal/.cargo/registry/src/github.com-1ecc6299db9ec823/without-alloc-0.2.1/src/fixed_vec.rs","byte_start":91179,"byte_end":91187,"line_start":708,"line_end":708,"column_start":29,"column_end":37},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":489},"to":{"krate":1,"index":7229}}]}